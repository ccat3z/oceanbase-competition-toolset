--disable_query_log
set @@session.explicit_defaults_for_timestamp=off;
--enable_query_log

--disable_abort_on_error
--disable_warnings
drop table if exists t1,t2;
--enable_warnings

create table t1 (a int auto_increment,b int ,key (a));
insert into t1(b) values(NULL),(NULL);
insert into t1 values(NULL,1),(NULL,2);
update /*adgagafgafg*/ t1 set b=3 where a = NULL;
update t1 set b=2 where b =1;
select * from t1;
drop table t1;

create table t1(a int primary key, b int);
insert into t1 values(1,1),(2,2);
update t1 set b=0 where a=1;
select * from t1;
update t1 set b=0 where a=2 and b=1;
select * from t1;
update t1 set b=0 where a=2 and b=2;
select * from t1;
drop table t1;

create table t1(a varchar(124) primary key, b varchar(1024));
insert into t1 values(1,1),(2,2);
update t1 set b=0 where a=1;
select * from t1;
update t1 set b=0 where a=2 and b=1;
select * from t1;
update t1 set b=0 where a=2 and b=2;
select * from t1;
--echo test update whether support use alias table
update t1 tt set tt.b=1 where tt.a=1;
select * from t1;
update t1 as tt set tt.b=2 where tt.a=1;
select * from t1;
update t1 tt set b=3 where a=1;
select * from t1;
update t1 tt set b=4 where a=1;
select * from t1;
update t1 tt set b=5 where tt.a=1;
select * from t1;
update t1 set t1.b=6 where t1.a=1;
select * from t1;
--error 1288 
update (select * from t1) as tt set tt.b=6 where tt.a=1;
--echo update rowkey use alias table
update t1 as tt set tt.a=3 where tt.a=1;
select * from t1;
drop table t1;



create table t1 (pk int primary key, a int, b int);

insert into t1 values(1,1,1),(2,1,1),(3,NULL,NULL),(4,1,1);

update t1 set a=0 where pk=1;
update t1 set a=2 where pk=1 and a=0;
update t1 set a=3 where pk=1 and a=0;

update t1 set a=0 where pk=2 or a=1;
update t1 set a=0 where pk=2 and a=1;


update t1 set a=0 where pk=3 and a=NULL;
update t1 set a=0 where pk=3 and a is NULL;
update t1 set a=NULL where pk=3 and a=0;

update t1 set a=0 where pk=4 and (a=2 or a=3);
update t1 set a=0 where pk=4 and (a=2 or a=1);
update t1 set a=10 where pk=4 and (a=2 or a=0);

select * from t1;

drop table t1;

set sql_mode="";
create table t1 (f1 char(0), i int primary key);
insert into t1 values (null, 1);
update t1 set f1 = 'update6_no' where f1 like '%insert%';

#bug
#set sql_mode="STRICT_ALL_TABLES";
#update t1 set f1 = 'update6_no' where f1 like '%insert%';

drop table t1;

create table t1(a int, b int, c int, primary key(a, b)) partition by range columns(a) subpartition by hash(b) subpartitions 5 (partition p0 values less than(2), partition p1 values less than(4), partition p2 values less than(6));
insert into t1 values(1, 1, 1), (2, 2, 2), (3, 3, 3) on duplicate key update b=2;
insert into t1 values(1, 1, 1), (2, 2, 2), (3, 3, 3) on duplicate key update b=2;
select * from t1;
select * from t1 where b=2;
insert into t1 values(1, 1, 1), (2, 2, 2), (3, 3, 3) on duplicate key update a=2;
--error 1064
replace into t1 values(1, 1, 1), (2, 2, 2), (3, 3, 3) on duplicate key update b=2;
--error 1064
replace into t1 values(1, 1, 1), (2, 2, 2), (3, 3, 3) on duplicate key update a=2;
select * from t1;
update t1 set b=1 where b=2;
select * from t1;
update t1 set a=1 where b=2;
select * from t1;
update t1 set a=2 where a=2;
select * from t1;
drop table t1;

create table t1(a int, b int, c int, primary key(a, b)) partition by hash(b) partitions 5;
insert into t1 values(1, 1, 1), (2, 2, 2), (3, 3, 3) on duplicate key update b=2;
--error 1064
replace into t1 values(1, 1, 1), (2, 2, 2), (3, 3, 3) on duplicate key update b=2;
insert into t1 values(1, 1, 1), (2, 2, 2), (3, 3, 3) on duplicate key update a=2;
--error 1064
replace into t1 values(1, 1, 1), (2, 2, 2), (3, 3, 3) on duplicate key update a=2;
select * from t1;
update t1 set b=1 where b=2;
select * from t1;
update t1 set a=1 where b=2;
select * from t1;
update t1 set a=2 where a=2;
select * from t1;
drop table t1;

create table t1(a int, b int, c int, primary key(a, b)) partition by range(b) (partition p0 values less than(2), partition p1 values less than (4), partition p2 values less than (6));
insert into t1 values(1, 1, 1), (2, 2, 2), (3, 3, 3) on duplicate key update b=2;
--error 1064
replace into t1 values(1, 1, 1), (2, 2, 2), (3, 3, 3) on duplicate key update b=2;
insert into t1 values(1, 1, 1), (2, 2, 2), (3, 3, 3) on duplicate key update a=2;
--error 1064
replace into t1 values(1, 1, 1), (2, 2, 2), (3, 3, 3) on duplicate key update a=2;
select * from t1;
update t1 set b=1 where b=2;
select * from t1;
update t1 set a=1 where b=2;
select * from t1;
update t1 set a=2 where a=2;
select * from t1;
drop table t1;

create table t1(a int primary key, b int);
insert into t1 values(1, 2);
select * from t1;
update t1 set a=2, b=a+3;
select * from t1;
drop table t1;

create table t1 (c1 varchar(20), c2 varchar(20));
insert into t1 values ('ccc', 'ccc');
select * from t1;
update t1 set c1='aaa', c2=concat(c1, 'aa');
select * from t1;
drop table t1;
--enable_abort_on_error
