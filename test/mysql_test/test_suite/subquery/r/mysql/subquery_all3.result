result_format: 4
explain_protocol: 0
drop table if exists t, t0, t1, t2, t3, t4, t5, t1s, t2s, m, o, integers;
drop view if exists v1, v2, v3, v4;
#
# BUG#48177 - SELECTs with NOT IN subqueries containing NULL
#             values return too many records
#
CREATE TABLE t1 (
  i1 int DEFAULT NULL,
  i2 int DEFAULT NULL
) ;

INSERT/*insert trace*/ INTO t1 VALUES (1,    NULL);
INSERT/*insert trace*/ INTO t1 VALUES (2,    3);
INSERT/*insert trace*/ INTO t1 VALUES (4,    NULL);
INSERT/*insert trace*/ INTO t1 VALUES (4,    0);
INSERT/*insert trace*/ INTO t1 VALUES (NULL, NULL);

CREATE TABLE t2 (
  i1 int DEFAULT NULL,
  i2 int DEFAULT NULL
) ;

INSERT/*insert trace*/ INTO t2 VALUES (4, NULL);
INSERT/*insert trace*/ INTO t2 VALUES (5, 0);


Data in t1
SELECT i1, i2 FROM t1;
+------+------+
| i1   | i2   |
+------+------+
|    1 | NULL |
|    2 |    3 |
|    4 | NULL |
|    4 |    0 |
| NULL | NULL |
+------+------+


Data in subquery (should be filtered out)
SELECT i1, i2 FROM t2 ORDER BY i1;
+------+------+
| i1   | i2   |
+------+------+
|    4 | NULL |
|    5 |    0 |
+------+------+


SELECT i1, i2
FROM t1
WHERE (i1, i2)
      NOT IN (SELECT i1, i2 FROM t2);
+------+------+
| i1   | i2   |
+------+------+
|    1 | NULL |
|    2 |    3 |
+------+------+


# Check that the subquery only has to be evaluated once
# for all-NULL values even though there are two (NULL,NULL) records
# Baseline:
SHOW STATUS LIKE '%Handler_read_rnd_next';
Variable_name	Value


INSERT/*insert trace*/ INTO t1 VALUES (NULL, NULL);


SELECT i1, i2
FROM t1
WHERE (i1, i2)
      NOT IN (SELECT i1, i2 FROM t2);
+------+------+
| i1   | i2   |
+------+------+
|    1 | NULL |
|    2 |    3 |
+------+------+


# Handler_read_rnd_next should be one more than baseline
# (read record from t1, but do not read from t2)
SHOW STATUS LIKE '%Handler_read_rnd_next';
Variable_name	Value

DROP TABLE t1,t2;

#
# Bug#54568: create view cause Assertion failed: 0,
# file .\item_subselect.cc, line 836
#
SELECT 1 LIKE ( 1 IN ( SELECT 1 ) );
+------------------------------+
| 1 LIKE ( 1 IN ( SELECT 1 ) ) |
+------------------------------+
|                            1 |
+------------------------------+
# None of the below should crash
CREATE VIEW v1 AS SELECT 1 LIKE ( 1 IN ( SELECT 1 ) );
CREATE VIEW v2 AS SELECT 1 LIKE '%' ESCAPE ( 1 IN ( SELECT 1 ) );
DROP VIEW v1, v2;

Set up test tables.
CREATE TABLE t1 (
	t1_id INT UNSIGNED,

	PRIMARY KEY(t1_id)
) ;

INSERT/*insert trace*/ INTO t1 (t1_id) VALUES (1), (2), (3), (4), (5);

CREATE TABLE t2 like t1;

INSERT/*insert trace*/ INTO t2 (t1_id) VALUES (1), (2), (3), (4), (5);

CREATE TABLE t3 (
	t3_id INT UNSIGNED AUTO_INCREMENT,
	t1_id INT UNSIGNED,
	amount DECIMAL(16,2),

	PRIMARY KEY(t3_id),
	KEY(t1_id)
) ;

INSERT/*insert trace*/ INTO t3 (t1_id, t3_id, amount)
        VALUES (1, 1, 100.00), (2, 2, 200.00), (4, 4, 400.00);

This is the 'inner query' running by itself.
Produces correct results.
SELECT
	t1.t1_id,
	IFNULL((SELECT SUM(amount) FROM t3 WHERE t3.t1_id=t1.t1_id), 0) AS total_amount
FROM
	t1
	LEFT JOIN t2 ON t2.t1_id=t1.t1_id
GROUP BY
	t1.t1_id
;
+-------+--------------+
| t1_id | total_amount |
+-------+--------------+
|     1 |       100.00 |
|     2 |       200.00 |
|     3 |         0.00 |
|     4 |       400.00 |
|     5 |         0.00 |
+-------+--------------+

SELECT * FROM (the same inner query)
Produces correct results.
SELECT * FROM (
SELECT
	t1.t1_id,
	IFNULL((SELECT SUM(amount) FROM t3 WHERE t3.t1_id=t1.t1_id), 0) AS total_amount
FROM
	t1
	LEFT JOIN t2 ON t2.t1_id=t1.t1_id
GROUP BY
	t1.t1_id
) AS t;
+-------+--------------+
| t1_id | total_amount |
+-------+--------------+
|     1 |       100.00 |
|     2 |       200.00 |
|     3 |         0.00 |
|     4 |       400.00 |
|     5 |         0.00 |
+-------+--------------+

Now make t2.t1_id part of a key.
Same inner query by itself.
Still correct results.
SELECT
	t1.t1_id,
	IFNULL((SELECT SUM(amount) FROM t3 WHERE t3.t1_id=t1.t1_id), 0) AS total_amount
FROM
	t1
	LEFT JOIN t2 ON t2.t1_id=t1.t1_id
GROUP BY
	t1.t1_id;
+-------+--------------+
| t1_id | total_amount |
+-------+--------------+
|     1 |       100.00 |
|     2 |       200.00 |
|     3 |         0.00 |
|     4 |       400.00 |
|     5 |         0.00 |
+-------+--------------+

SELECT * FROM (the same inner query), now with indexes on the LEFT JOIN
SELECT * FROM (
SELECT
	t1.t1_id,
	IFNULL((SELECT SUM(amount) FROM t3 WHERE t3.t1_id=t1.t1_id), 0) AS total_amount
FROM
	t1
	LEFT JOIN t2 ON t2.t1_id=t1.t1_id
GROUP BY
	t1.t1_id
) AS t;
+-------+--------------+
| t1_id | total_amount |
+-------+--------------+
|     1 |       100.00 |
|     2 |       200.00 |
|     3 |         0.00 |
|     4 |       400.00 |
|     5 |         0.00 |
+-------+--------------+

DROP TABLE t3;
DROP TABLE t2;
DROP TABLE t1;

create table t0 (a int);
INSERT/*insert trace*/ into t0 values (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);

create table t1 (
  a int(11) default null,
  b int(11) default null,
  key (a)
);
create table t2 (a int(11) default null);
INSERT/*insert trace*/ into t2 values (0),(1);

create table t3 (a int(11) default null);
INSERT/*insert trace*/ into t3 values (0),(1);

create table t4 (a int(11) default null);
INSERT/*insert trace*/ into t4 values (0),(1);

create table t5 (a int(11) default null);
INSERT/*insert trace*/ into t5 values (0),(1),(0),(1);

select * from t2, t3
where
    t2.a < 10 and
    t3.a+1 = 2 and
    t3.a in (select t1.b from t1
                 where t1.a+1=t1.a+1 and
                       t1.a < (select t4.a+10
                                  from t4, t5 limit 2));
ERROR 21000: Subquery returns more than 1 row

drop table t0, t1, t2, t3, t4, t5;

#
# BUG#48177 - SELECTs with NOT IN subqueries containing NULL
#             values return too many records
#
CREATE TABLE t1 (
  i1 int DEFAULT NULL,
  i2 int DEFAULT NULL
) ;

INSERT/*insert trace*/ INTO t1 VALUES (1,    NULL);
INSERT/*insert trace*/ INTO t1 VALUES (2,    3);
INSERT/*insert trace*/ INTO t1 VALUES (4,    NULL);
INSERT/*insert trace*/ INTO t1 VALUES (4,    0);
INSERT/*insert trace*/ INTO t1 VALUES (NULL, NULL);

CREATE TABLE t2 (
  i1 int DEFAULT NULL,
  i2 int DEFAULT NULL
) ;

INSERT/*insert trace*/ INTO t2 VALUES (4, NULL);
INSERT/*insert trace*/ INTO t2 VALUES (5, 0);


Data in t1
SELECT i1, i2 FROM t1;
+------+------+
| i1   | i2   |
+------+------+
|    1 | NULL |
|    2 |    3 |
|    4 | NULL |
|    4 |    0 |
| NULL | NULL |
+------+------+


Data in subquery (should be filtered out)
SELECT i1, i2 FROM t2 ORDER BY i1;
+------+------+
| i1   | i2   |
+------+------+
|    4 | NULL |
|    5 |    0 |
+------+------+


SELECT i1, i2
FROM t1
WHERE (i1, i2)
      NOT IN (SELECT i1, i2 FROM t2);
+------+------+
| i1   | i2   |
+------+------+
|    1 | NULL |
|    2 |    3 |
+------+------+


# Check that the subquery only has to be evaluated once
# for all-NULL values even though there are two (NULL,NULL) records
# Baseline:
SHOW STATUS LIKE '%Handler_read_rnd_next';
Variable_name	Value


INSERT/*insert trace*/ INTO t1 VALUES (NULL, NULL);


SELECT i1, i2
FROM t1
WHERE (i1, i2)
      NOT IN (SELECT i1, i2 FROM t2);
+------+------+
| i1   | i2   |
+------+------+
|    1 | NULL |
|    2 |    3 |
+------+------+


# Handler_read_rnd_next should be one more than baseline
# (read record from t1, but do not read from t2)
SHOW STATUS LIKE '%Handler_read_rnd_next';
Variable_name	Value
DROP TABLE t1,t2;


#
# Bug #52711: Segfault when doing EXPLAIN BASIC SELECT with
#  union...order by (select... where...)
#
CREATE TABLE t1 (a VARCHAR(10), KEY a (a));
INSERT/*insert trace*/ INTO t1 VALUES (1),(2);
CREATE TABLE t2 (b INT);
INSERT/*insert trace*/ INTO t2 VALUES (1),(2);

# Should not crash
# Should not crash
DROP TABLE t1,t2;
#
# Bug #58818: Incorrect result for IN/ANY subquery
# with HAVING condition
#
CREATE TABLE t1(i INT);
INSERT/*insert trace*/ INTO t1 VALUES (1), (2), (3);
CREATE TABLE t1s(i INT);
INSERT/*insert trace*/ INTO t1s VALUES (10), (20), (30);
CREATE TABLE t2s(i INT);
INSERT/*insert trace*/ INTO t2s VALUES (100), (200), (300);

SELECT * FROM t1
WHERE t1.i NOT IN
(
  SELECT  t2s.i
  FROM
  t1s LEFT OUTER JOIN t2s ON t2s.i = t1s.i
  HAVING t2s.i = 999
);
+------+
| i    |
+------+
|    1 |
|    2 |
|    3 |
+------+

SELECT * FROM t1
WHERE t1.I IN
(
  SELECT  t2s.i
  FROM
  t1s LEFT OUTER JOIN t2s ON t2s.i = t1s.i
  HAVING t2s.i = 999
) IS UNKNOWN;
+------+
| i    |
+------+
+------+

SELECT * FROM t1
WHERE NOT t1.I = ANY
(
  SELECT  t2s.i
  FROM
  t1s LEFT OUTER JOIN t2s ON t2s.i = t1s.i
  HAVING t2s.i = 999
);
+------+
| i    |
+------+
|    1 |
|    2 |
|    3 |
+------+

SELECT * FROM t1
 WHERE t1.i = ANY (
  SELECT  t2s.i
  FROM
  t1s LEFT OUTER JOIN t2s ON t2s.i = t1s.i
  HAVING t2s.i = 999
 ) IS UNKNOWN;
+------+
| i    |
+------+
+------+

DROP TABLE t1,t1s,t2s;

#
# Bug #56690  Wrong results with subquery with
# GROUP BY inside < ANY clause
#
CREATE TABLE t1 (
 pk INT NOT NULL PRIMARY KEY,
 number INT,
 KEY key_number (number)
);
INSERT/*insert trace*/ INTO t1 VALUES (8,8);

CREATE TABLE t2 (
 pk INT NOT NULL PRIMARY KEY,
 number INT,
 KEY key_number (number)
);

INSERT/*insert trace*/ INTO t2 VALUES (1,2);
INSERT/*insert trace*/ INTO t2 VALUES (2,8);
INSERT/*insert trace*/ INTO t2 VALUES (3,NULL);
INSERT/*insert trace*/ INTO t2 VALUES (4,166);

SELECT * FROM t1 WHERE t1.number < ANY(SELECT number FROM t2 GROUP BY number);
+----+--------+
| pk | number |
+----+--------+
|  8 |      8 |
+----+--------+
SELECT * FROM t1 WHERE t1.number < ANY(SELECT number FROM t2);
+----+--------+
| pk | number |
+----+--------+
|  8 |      8 |
+----+--------+

DROP TABLE t1,t2;

End of 5.1 tests
#
# BUG#50257: Missing info in REF column of the EXPLAIN BASIC
#            lines for subselects
#
CREATE TABLE t1 (a INT, b INT, INDEX (a));
INSERT/*insert trace*/ INTO t1 VALUES (3, 10), (2, 20), (7, 10), (5, 20);


SELECT * FROM (SELECT * FROM t1 WHERE a=7) t;
+------+------+
| a    | b    |
+------+------+
|    7 |   10 |
+------+------+

SELECT * FROM t1 WHERE EXISTS (SELECT * FROM t1 WHERE a=7);
+------+------+
| a    | b    |
+------+------+
|    3 |   10 |
|    2 |   20 |
|    7 |   10 |
|    5 |   20 |
+------+------+


DROP TABLE t1;

#
# BUG#52317: Assertion failing in Field_varstring::store()
# 	    at field.cc:6833
#
CREATE TABLE t1 (i INTEGER);
INSERT/*insert trace*/ INTO t1 VALUES (1);
CREATE TABLE t2 (i INTEGER, KEY k(i));
INSERT/*insert trace*/ INTO t2 VALUES (1), (2);

SELECT i FROM t1 WHERE (1) NOT IN (SELECT i FROM t2);
+------+
| i    |
+------+
+------+

DROP TABLE t2;
DROP TABLE t1;

#
# Bug #11765713 58705:
# OPTIMIZER LET ENGINE DEPEND ON UNINITIALIZED VALUES
# CREATED BY OPT_SUM_QUERY
#
CREATE TABLE t1(a INT NOT NULL, KEY (a));
INSERT/*insert trace*/ INTO t1 VALUES (0), (1);

SELECT 1 as foo FROM t1 WHERE a < SOME
  (SELECT a FROM t1 WHERE a <=>
    (SELECT a FROM t1)
  );
ERROR 21000: Subquery returns more than 1 row

DROP TABLE t1;

#
# Bug #57704: Cleanup code dies with void TABLE::set_keyread(bool):
#             Assertion `file' failed.
#
CREATE TABLE t1 (a INT);

SELECT 1 FROM
  (SELECT ROW(
    (SELECT 1 FROM t1 RIGHT JOIN
      (SELECT 1 FROM t1, t1 t2) AS d ON 1),
    1) FROM t1) AS e;
ERROR 21000: Operand should contain 1 column(s)

DROP TABLE t1;

#
# Bug#11764086: Null left operand to NOT IN in WHERE clause
# behaves differently than real NULL
#

CREATE TABLE parent (id int);
INSERT/*insert trace*/ INTO parent VALUES (1), (2);

CREATE TABLE child (parent_id int, other int);
INSERT/*insert trace*/ INTO child VALUES (1,NULL);

# Offending query (c.parent_id is NULL for null-complemented rows only)
SELECT    p.id, c.parent_id
FROM      parent p
LEFT JOIN child  c
ON        p.id = c.parent_id
WHERE     c.parent_id NOT IN (
              SELECT parent_id
              FROM   child
              WHERE  parent_id = 3
          );
+------+-----------+
| id   | parent_id |
+------+-----------+
|    1 |         1 |
|    2 |      NULL |
+------+-----------+

# Some syntactic variations with IS FALSE and IS NOT TRUE
SELECT    p.id, c.parent_id
FROM      parent p
LEFT JOIN child  c
ON        p.id = c.parent_id
WHERE     c.parent_id IN (
              SELECT parent_id
              FROM   child
              WHERE  parent_id = 3
          ) IS NOT TRUE;
+------+-----------+
| id   | parent_id |
+------+-----------+
|    1 |         1 |
|    2 |      NULL |
+------+-----------+

SELECT    p.id, c.parent_id
FROM      parent p
LEFT JOIN child  c
ON        p.id = c.parent_id
WHERE     c.parent_id IN (
              SELECT parent_id
              FROM   child
              WHERE  parent_id = 3
          ) IS FALSE;
+------+-----------+
| id   | parent_id |
+------+-----------+
|    1 |         1 |
|    2 |      NULL |
+------+-----------+

DROP TABLE parent, child;

# End of test for bug#11764086.
End of 5.5 tests.
#
# BUG#48920: COUNT DISTINCT returns 1 for NULL values when in a subquery
#            in the select list
#

CREATE TABLE t1 (
  i int(11) DEFAULT NULL,
  v varchar(1) DEFAULT NULL
);


INSERT/*insert trace*/ INTO t1 VALUES (8,'v');
INSERT/*insert trace*/ INTO t1 VALUES (9,'r');
INSERT/*insert trace*/ INTO t1 VALUES (NULL,'y');


CREATE TABLE t2 (
  i int(11) DEFAULT NULL,
  v varchar(1) DEFAULT NULL,
  KEY i_key (i)
);


INSERT/*insert trace*/ INTO t2 VALUES (NULL,'r');
INSERT/*insert trace*/ INTO t2 VALUES (0,'c');
INSERT/*insert trace*/ INTO t2 VALUES (0,'o');
INSERT/*insert trace*/ INTO t2 VALUES (2,'v');
INSERT/*insert trace*/ INTO t2 VALUES (7,'c');


SELECT i, v, (SELECT COUNT(DISTINCT i)
              FROM t1
              WHERE v  = t2.v) as subsel
FROM t2;
+------+------+--------+
| i    | v    | subsel |
+------+------+--------+
| NULL | r    |      1 |
|    0 | c    |      0 |
|    0 | o    |      0 |
|    2 | v    |      1 |
|    7 | c    |      0 |
+------+------+--------+


SELECT i, v, (SELECT COUNT(DISTINCT i)
              FROM t1
              WHERE v  = t2.v) as subsel
FROM t2;
+------+------+--------+
| i    | v    | subsel |
+------+------+--------+
| NULL | r    |      1 |
|    0 | c    |      0 |
|    0 | o    |      0 |
|    2 | v    |      1 |
|    7 | c    |      0 |
+------+------+--------+

DROP TABLE t1,t2;

#
# BUG#50257: Missing info in REF column of the EXPLAIN BASIC
#            lines for subselects
#
CREATE TABLE t1 (a INT, b INT, INDEX (a));
INSERT/*insert trace*/ INTO t1 VALUES (3, 10), (2, 20), (7, 10), (5, 20);


SELECT * FROM (SELECT * FROM t1 WHERE a=7) t;
+------+------+
| a    | b    |
+------+------+
|    7 |   10 |
+------+------+

SELECT * FROM t1 WHERE EXISTS (SELECT * FROM t1 WHERE a=7);
+------+------+
| a    | b    |
+------+------+
|    3 |   10 |
|    2 |   20 |
|    7 |   10 |
|    5 |   20 |
+------+------+


DROP TABLE t1;

#
# BUG#58561: Server Crash with correlated subquery and MyISAM tables
#
DROP TABLE IF EXISTS bb, b, cc, c;
CREATE TABLE cc (
  pk INT,
  col_int_key INT,
  col_varchar_key VARCHAR(1),
  PRIMARY KEY (pk),
  KEY col_int_key (col_int_key),
  KEY col_varchar_key (col_varchar_key,col_int_key)
) ;
INSERT/*insert trace*/ INTO cc VALUES (10,7,'v');
INSERT/*insert trace*/ INTO cc VALUES (11,1,'r');

CREATE TABLE bb (
  pk INT,
  col_date_key DATE,
  PRIMARY KEY (pk),
  KEY col_date_key (col_date_key)
) ;
INSERT/*insert trace*/ INTO bb VALUES (10,'2002-02-21');

CREATE TABLE c (
  pk INT,
  col_int_key INT,
  col_varchar_key VARCHAR(1),
  PRIMARY KEY (pk),
  KEY col_int_key (col_int_key),
  KEY col_varchar_key (col_varchar_key,col_int_key)
) ;
INSERT/*insert trace*/ INTO c VALUES (1,NULL,'w');
INSERT/*insert trace*/ INTO c VALUES (19,NULL,'f');

CREATE TABLE b (
  pk INT,
  col_int_key INT,
  col_varchar_key VARCHAR(1),
  PRIMARY KEY (pk),
  KEY col_int_key (col_int_key),
  KEY col_varchar_key (col_varchar_key,col_int_key)
) ;
INSERT/*insert trace*/ INTO b VALUES (1,7,'f');

SELECT col_int_key
FROM b granparent1
WHERE (col_int_key, col_int_key) IN (
    SELECT parent1.pk, parent1.pk
    FROM bb parent1 JOIN cc parent2
                    ON parent2.col_varchar_key = parent2.col_varchar_key
    WHERE granparent1.col_varchar_key IN (
        SELECT col_varchar_key
        FROM c)
      AND parent1.pk = granparent1.col_int_key
    ORDER BY parent1.col_date_key
);
+-------------+
| col_int_key |
+-------------+
+-------------+

DROP TABLE bb, b, cc, c;

End of 5.6 tests
#
# BUG#46743 "Azalea processing correlated, aggregate SELECT
# subqueries incorrectly"
#
CREATE TABLE t1 (c int);
INSERT/*insert trace*/ INTO t1 VALUES (NULL);
CREATE TABLE t2 (d int , KEY (d));
INSERT/*insert trace*/ INTO t2 VALUES (NULL),(NULL);
0 rows in subquery
SELECT 1 AS RESULT FROM t2,t1 WHERE d = c;
+--------+
| RESULT |
+--------+
+--------+
base query
SELECT (SELECT 1 FROM t2 WHERE d = c) AS RESULT FROM t1 ;
+--------+
| RESULT |
+--------+
|   NULL |
+--------+
first equivalent variant
SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c,NULL)) AS RESULT FROM t1 GROUP BY c;
+--------+
| RESULT |
+--------+
|   NULL |
+--------+
second equivalent variant
SELECT (SELECT 1 FROM t2 WHERE d = c) AS RESULT FROM t1 GROUP BY c ;
+--------+
| RESULT |
+--------+
|   NULL |
+--------+

DROP TABLE t1,t2;


BUG#37842: Assertion in DsMrr_impl::dsmrr_init, at handler.cc:4307

CREATE TABLE t1 (
  `pk` int(11) NOT NULL AUTO_INCREMENT,
  `int_key` int(11) DEFAULT NULL,
  PRIMARY KEY (`pk`),
  KEY `int_key` (`int_key`)
) ;

INSERT/*insert trace*/ INTO t1 VALUES (1,9),(2,3),(3,8),(4,6),(5,9),(6,5),(7,5),(8,9),(9,1),(10,10);

SELECT `pk` FROM t1 AS OUTR WHERE `int_key` = ALL (
 SELECT `int_key` FROM t1 AS INNR WHERE INNR . `pk` >= 9
);
+----+
| pk |
+----+
+----+
DROP TABLE t1;

#
# Bug#53236 Segfault in DTCollation::set(DTCollation&)
#
CREATE TABLE t1 (
  pk INTEGER AUTO_INCREMENT,
  col_varchar VARCHAR(1),
  PRIMARY KEY (pk)
)
;

INSERT/*insert trace*/ INTO t1 (col_varchar)
VALUES
('w'),
('m')
;

SELECT  table1.pk
FROM ( t1 AS table1 JOIN t1 AS table2 ON (table1.col_varchar =
                                          table2.col_varchar) )
WHERE ( 1, 2 ) IN ( SELECT SUBQUERY1_t1.pk AS SUBQUERY1_field1,
                           SUBQUERY1_t1.pk AS SUBQUERY1_field2
                    FROM ( t1 AS SUBQUERY1_t1 JOIN t1 AS SUBQUERY1_t2
                           ON (SUBQUERY1_t2.col_varchar =
                               SUBQUERY1_t1.col_varchar) ) )
;
+----+
| pk |
+----+
+----+

drop table t1;
#
# Bug#58207: invalid memory reads when using default column value and
# tmptable needed
#
CREATE TABLE t(a VARCHAR(245) DEFAULT
'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa');
INSERT/*insert trace*/ INTO t VALUES (''),(''),(''),(''),(''),(''),(''),(''),(''),(''),('');
SELECT * FROM (SELECT default(a) FROM t GROUP BY a) d;
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| default(a)                                                                                                                                                                   |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
DROP TABLE t;

#
# Bug 11765699 - 58690: !TABLE || (!TABLE->READ_SET ||
#                BITMAP_IS_SET(TABLE->READ_SET, FIELD_INDEX
#
CREATE TABLE t1(a INT);
INSERT/*insert trace*/ INTO t1 VALUES (0), (1);

CREATE TABLE t2(
  b VARCHAR(200),
  c INT,
  PRIMARY KEY (b)
);
INSERT/*insert trace*/ INTO t2 VALUES ('a', 2), ('b', 3);

SELECT 1 FROM t1 WHERE a =
 (SELECT 1 FROM t2 WHERE b =
  (SELECT 1 FROM t1 t11 WHERE c = 1 OR t1.a = 1 AND 1 = 2)
   ORDER BY b
 );
+---+
| 1 |
+---+
+---+

SELECT 1 FROM t1 WHERE a =
 (SELECT 1 FROM t2 WHERE b =
  (SELECT 1 FROM t1 t11 WHERE c = 1 OR t1.a = 1 AND 1 = 2)
   GROUP BY b
 );
+---+
| 1 |
+---+
+---+

DROP TABLE t1, t2;

#
# BUG#12616253 - WRONG RESULT WITH EXISTS(SUBQUERY) (MISSING ROWS)
#
CREATE TABLE t1 (f1 varchar(1));
INSERT/*insert trace*/ INTO t1 VALUES ('v'),('s');

CREATE TABLE t2 (f1_key varchar(1), KEY (f1_key));
INSERT/*insert trace*/ INTO t2 VALUES ('j'),('v'),('c'),('m'),('d'),
('d'),('y'),('t'),('d'),('s');

DROP TABLE t1,t2;

#
# BUG#12616477 - 0 VS NULL DIFFERENCES WITH OUTER JOIN, SUBQUERY
#
CREATE TABLE t1 (
col_int_key int,
col_varchar_key varchar(1),
col_varchar_nokey varchar(1),
KEY (col_int_key)
);
INSERT/*insert trace*/ INTO t1 VALUES (224,'p','p'),(9,'e','e');

CREATE TABLE t3 (
col_int_key int,
col_varchar_key varchar(1),
KEY col_int_key (col_int_key),
KEY col_varchar_key (col_varchar_key,col_int_key))
;
INSERT/*insert trace*/ INTO t3 VALUES (4,'p'),(8,'e'),(10,'a');

DROP TABLE t1,t3;

#
# Bug#12795555: Missing rows with ALL/ANY subquery
#
CREATE TABLE t1 (f1 INT);
INSERT/*insert trace*/ INTO t1 VAlUES (NULL),(1),(NULL),(2);
SELECT f1 FROM t1 WHERE f1 < ALL (SELECT 1 FROM DUAL WHERE 0);
+------+
| f1   |
+------+
| NULL |
|    1 |
| NULL |
|    2 |
+------+
DROP TABLE t1;
CREATE TABLE t1 (k VARCHAR(1), KEY k(k));
INSERT/*insert trace*/ INTO t1 VALUES ('r'), (NULL), (NULL);

CREATE TABLE t2 (c VARCHAR(1));
INSERT/*insert trace*/ INTO t2 VALUES ('g'), (NULL);

CREATE TABLE t3 (c VARCHAR(1));

SELECT COUNT(*)
FROM t1 JOIN t2
WHERE t1.k < ALL(
  SELECT c
  FROM t3
);
+----------+
| COUNT(*) |
+----------+
|        6 |
+----------+

DROP TABLE t1, t2, t3;

#
# Bug#12838171: 51VS56: TRANSFORMED IN()+SUBQ QUERY
#               PRODUCES EMPTY RESULT ON 5.6, 1 ROW ON 5.1
#
CREATE TABLE ot (
  col_int_nokey int(11),
  col_varchar_nokey varchar(1)
) ;

INSERT/*insert trace*/ INTO ot VALUES (1,'x');

CREATE TABLE it (
  col_int_key int(11),
  col_varchar_key varchar(1),
  KEY idx_cvk_cik (col_varchar_key,col_int_key)
) ;

INSERT/*insert trace*/ INTO it VALUES (NULL,'x'), (NULL,'f');


SELECT col_int_nokey
FROM ot
WHERE col_varchar_nokey IN
   (SELECT col_varchar_key
    FROM it
    WHERE col_int_key IS NULL);
+---------------+
| col_int_nokey |
+---------------+
|             1 |
+---------------+


SELECT col_int_nokey
FROM ot
WHERE col_varchar_nokey IN
   (SELECT col_varchar_key
    FROM it
    WHERE coalesce(col_int_nokey, 1) );
+---------------+
| col_int_nokey |
+---------------+
|             1 |
+---------------+

DROP TABLE it;

CREATE TABLE it (
   col_int_key int(11),
   col_varchar_key varchar(1),
   col_varchar_key2 varchar(1),
   KEY idx_cvk_cvk2_cik (col_varchar_key, col_varchar_key2, col_int_key),
   KEY idx_cvk_cik (col_varchar_key, col_int_key)
);

INSERT/*insert trace*/ INTO it VALUES (NULL,'x','x'), (NULL,'f','f');

SELECT col_int_nokey
FROM ot
WHERE (col_varchar_nokey, 'x') IN
    (SELECT col_varchar_key, col_varchar_key2
     FROM it
     WHERE col_int_key IS NULL);
+---------------+
| col_int_nokey |
+---------------+
|             1 |
+---------------+


DROP TABLE it, ot;

#
# Bug #11829691: Pure virtual method called in Item_bool_func2::fix...()
#
CREATE TABLE t1(a INTEGER);
CREATE TABLE t2(b INTEGER);

DROP TABLE t1, t2;

#
# Bug #13595212 EXTRA ROWS RETURNED ON RIGHT JOIN WITH VIEW AND
# IN-SUBQUERY IN WHERE
#
CREATE TABLE t1 (
  pk int(11) NOT NULL AUTO_INCREMENT,
  col_int_key int(11) NOT NULL,
  col_varchar_key varchar(1) NOT NULL,
  col_varchar_nokey varchar(1) NOT NULL,
  PRIMARY KEY (pk),
  KEY col_int_key (col_int_key),
  KEY col_varchar_key (col_varchar_key,col_int_key)
);

INSERT/*insert trace*/ INTO t1 VALUES (1,0,'j','j'),(2,8,'v','v'),
(3,1,'c','c'),(4,8,'m','m'),(5,9,'d','d');

CREATE VIEW v1 AS SELECT * FROM t1;

## Same, but in view:
## Same, with LEFT JOIN
DROP TABLE t1;
DROP VIEW v1;

#
# Bug#13651009 WRONG RESULT FROM DERIVED TABLE IF THE SUBQUERY
# HAS AN EMPTY RESULT
#
CREATE TABLE t1 (
  pk int NOT NULL,
  col_int_nokey int NOT NULL,
  col_int_key int NOT NULL,
  col_time_key time NOT NULL,
  col_varchar_key varchar(1) NOT NULL,
  col_varchar_nokey varchar(1) NOT NULL,
  PRIMARY KEY (pk),
  KEY col_int_key (col_int_key),
  KEY col_time_key (col_time_key),
  KEY col_varchar_key (col_varchar_key,col_int_key)
) ;

CREATE TABLE t2 (
  pk int NOT NULL AUTO_INCREMENT,
  col_int_nokey int NOT NULL,
  col_int_key int NOT NULL,
  col_time_key time NOT NULL,
  col_varchar_key varchar(1) NOT NULL,
  col_varchar_nokey varchar(1) NOT NULL,
  PRIMARY KEY (pk),
  KEY col_int_key (col_int_key),
  KEY col_time_key (col_time_key),
  KEY col_varchar_key (col_varchar_key,col_int_key)
) ;

INSERT/*insert trace*/ INTO t2 VALUES (1,4,4,'00:00:00','b','b');

SET @var2:=4, @var3:=8;


Testcase without inner subquery
## Now as derived table:
## Now as derived table:
DROP TABLE t1,t2;

#
# Test that indexsubquery_engine only does one lookup if
# the technique is unique_subquery: does not try to read the
# next row if the first row failed the subquery's WHERE
# condition (here: b=3).
#
create table t1(a int);
INSERT/*insert trace*/ into t1 values(1),(2);
create table t2(a int primary key, b int);
INSERT/*insert trace*/ into t2 values(1,10),(2,10);
show status like "handler_read%";
Variable_name	Value
drop table t1,t2;

#
# Bug#13735980 Difference in number of rows when using subqueries
#
CREATE TABLE m (c1 VARCHAR(1), c2 INTEGER, c3 INTEGER);
INSERT/*insert trace*/ INTO m VALUES ('',6,8), ('',75,NULL);

CREATE TABLE o (c1 VARCHAR(1));
INSERT/*insert trace*/ INTO o VALUES ('S'), ('S'), ('S');

CREATE VIEW v1 AS
SELECT m.c1 AS c1,m.c2 AS c2,m.c3 AS c3 FROM m;

CREATE VIEW v2 AS
SELECT o.c1 AS c1 FROM o;

SELECT t1.c3
FROM v1 AS t1 JOIN v2 AS t2 ON t1.c1 < t2.c1
WHERE t1.c3 BETWEEN 2 AND 6 OR
      (t1.c3 IN(4) AND t1.c3 <> 2) OR t1.c2 >= 8;
+------+
| c3   |
+------+
| NULL |
| NULL |
| NULL |
+------+

CREATE TABLE integers (i1 INTEGER);
INSERT/*insert trace*/ INTO integers VALUES (2),(4),(6),(8);

SELECT t1.c3
FROM v1 AS t1 JOIN v2 AS t2 ON t1.c1 < t2.c1
WHERE t1.c3 BETWEEN (SELECT i1 FROM integers WHERE i1 = 2) AND
                    (SELECT i1 FROM integers WHERE i1 = 6)  OR
      t1.c3 IN((SELECT i1 FROM integers WHERE i1 = 4)) AND
      t1.c3 <>(SELECT i1 FROM integers WHERE i1 = 2) OR
      t1.c2 >=(SELECT i1 FROM integers WHERE i1 = 8);
+------+
| c3   |
+------+
| NULL |
| NULL |
| NULL |
+------+

SELECT t1.c3
FROM m AS t1 JOIN o AS t2 ON t1.c1 < t2.c1
WHERE t1.c3 BETWEEN (SELECT i1 FROM integers WHERE i1 = 2) AND
                    (SELECT i1 FROM integers WHERE i1 = 6)  OR
      t1.c3 IN((SELECT i1 FROM integers WHERE i1 = 4)) AND
      t1.c3 <>(SELECT i1 FROM integers WHERE i1 = 2) OR
      t1.c2 >=(SELECT i1 FROM integers WHERE i1 = 8);
+------+
| c3   |
+------+
| NULL |
| NULL |
| NULL |
+------+

DROP VIEW v1, v2;
DROP TABLE m, o, integers;

#
# Bug#13721076 CRASH WITH TIME TYPE/TIMESTAMP() AND WARNINGS IN SUBQUERY
#
CREATE TABLE t1(a TIME NOT NULL);
INSERT/*insert trace*/ INTO t1 VALUES ('00:00:32');

DROP TABLE t1;

#
# Bug #13736664 RIGHT JOIN+WHERE QUERY GIVES DIFF RESULTS WHEN USING
# SELECT * SUBQ FOR TABLES
#
CREATE TABLE t1(a INT, b CHAR(1));
INSERT/*insert trace*/ INTO t1 VALUES (NULL, 'x');

CREATE TABLE t2(c INT, d CHAR(1));
INSERT/*insert trace*/ INTO t2 VALUES (NULL, 'y'), (9, 'z');

SELECT d
FROM t2 AS a2 RIGHT JOIN t1 AS a1 ON c = a
WHERE d LIKE '_'
ORDER BY d;
+------+
| d    |
+------+
+------+

SELECT d
FROM (SELECT * FROM t2) AS a2 RIGHT JOIN (SELECT * FROM t1) AS a1 ON c = a
WHERE d LIKE '_'
ORDER BY d;
+------+
| d    |
+------+
+------+

DROP TABLE t1, t2;

#
# Bug#13468414 Query shows different results when literals are selected
#              from separate table
#
CREATE TABLE t1 (
  col_varchar_key varchar(1) NOT NULL,
  col_varchar_nokey varchar(1) NOT NULL,
  KEY col_varchar_key (col_varchar_key)
) ;

INSERT/*insert trace*/ INTO t1 VALUES
 ('v','v'), ('s','s'), ('l','l'), ('y','y'), ('c','c'),
 ('i','i'), ('h','h'), ('q','q'), ('a','a'), ('v','v'),
 ('u','u'), ('s','s'), ('y','y'), ('z','z'), ('h','h'),
 ('p','p'), ('e','e'), ('i','i'), ('y','y'), ('w','w');

CREATE TABLE t2 (
  col_int_nokey INT NOT NULL,
  col_varchar_nokey varchar(1) NOT NULL
) ;

INSERT/*insert trace*/ INTO t2 VALUES
 (4,'j'), (6,'v'), (3,'c'), (5,'m'), (3,'d'), (246,'d'), (2,'y'), (9,'t'),
 (3,'d'), (8,'s'), (1,'r'), (8,'m'), (8,'b'), (5,'x'), (7,'g'), (5,'p'),
 (1,'q'), (6,'w'), (2,'d'), (9,'e');

CREATE TABLE t0 (
 i1 INTEGER NOT NULL PRIMARY KEY
);
INSERT/*insert trace*/ INTO t0 VALUES (7);

SELECT col_varchar_nokey
FROM t1
WHERE (7) NOT IN
 (SELECT it2.col_int_nokey
  FROM t2 AS it2 LEFT JOIN t1 AS it1
       ON it2.col_varchar_nokey = it1.col_varchar_key
 );
+-------------------+
| col_varchar_nokey |
+-------------------+
+-------------------+

DROP TABLE t0, t1, t2;

#
# Bug#13735704 Memory engine + NOT IN + subquery produces different
# result set
#
CREATE TABLE t1(
 col_varchar_key varchar(1),
 KEY col_varchar_key(col_varchar_key)
) ;
INSERT/*insert trace*/ INTO t1 VALUES
 ('v'), ('s'), ('y'), ('z'), ('h'), ('p');

CREATE TABLE t2(
 col_int_nokey int,
 col_int_key int,
 KEY col_int_key(col_int_key)
) ;
INSERT/*insert trace*/ INTO t2 VALUES
 (4,4), (2,7), (2,5), (2,3), (197,188), (4,4), (6,2), (1,4),
 (156,231), (2,1), (1,2), (80,194), (3,2), (8,3), (91,98), (6,3),
 (7,1), (3,0), (161,189), (7,8), (7,3), (213,120), (248,25), (1,1),
 (6,3), (6,1), (3,3), (140,153), (0,5), (7,9), (6,1), (1,2),
 (1,7), (9,2), (0,1), (6,5);

CREATE TABLE t0(i1 INTEGER NOT NULL PRIMARY KEY);
INSERT/*insert trace*/ INTO t0 VALUES(7),(2);

SELECT col_varchar_key
FROM t1
WHERE (7,2) NOT IN
   (SELECT col_int_key,col_int_nokey FROM t2);
+-----------------+
| col_varchar_key |
+-----------------+
+-----------------+

DROP TABLE t0, t1, t2;

#
# Bug #13639204 64111: CRASH ON SELECT SUBQUERY WITH NON UNIQUE
# INDEX
#
CREATE TABLE t1 (
id int
) ;
INSERT/*insert trace*/ INTO t1 (id) VALUES (11);

CREATE TABLE t2 (
t1_id int,
position int,
KEY t1_id (t1_id),
KEY t1_id_position (t1_id,position)
) ;

DROP TABLE t1,t2;

#
# Bug#13731417 WRONG RESULT WITH NOT IN (SUBQUERY) AND
# COMPOSITE INDEX ON SUBQUERY'S TABLE
#
CREATE TABLE t1 (a int, b int);
CREATE TABLE t2 (a int, b int, KEY a_b (a,b));
CREATE TABLE t4 (a int);
INSERT/*insert trace*/ INTO t1 VALUES(0,1);
INSERT/*insert trace*/ INTO t2 VALUES(NULL,1),(NULL,1);
INSERT/*insert trace*/ INTO t4 VALUES(1);

SELECT ((0,1) NOT IN (SELECT NULL,1)) IS NULL;
+----------------------------------------+
| ((0,1) NOT IN (SELECT NULL,1)) IS NULL |
+----------------------------------------+
|                                      1 |
+----------------------------------------+

DROP TABLE t1,t2,t4;

#
# Bug#13725821 ASSERT NULL_REF_KEY == __NULL FAILED IN
# CREATE_REF_FOR_KEY() IN SQL_SELECT.CC
#
CREATE TABLE t1 (
  pk INT NOT NULL,
  col_int_nokey INT,
  col_int_key INT,
  col_varchar_key VARCHAR(1),
  col_varchar_nokey VARCHAR(1),
  PRIMARY KEY (pk),
  KEY col_int_key (col_int_key),
  KEY col_varchar_key (col_varchar_key,col_int_key)
) ;

INSERT/*insert trace*/ INTO t1 VALUES (17,NULL,9,NULL,NULL),
(18,2,2,'o','o'),(19,NULL,9,'w','w'),(20,6,2,'m','m'),(21,7,4,'q','q'),
(22,2,0,NULL,NULL),(23,5,4,'d','d'),(24,7,8,'g','g'),(25,6,NULL,'x','x'),
(26,6,NULL,'f','f'),(27,2,0,'p','p'),(28,9,NULL,'j','j'),(29,6,8,'c','c');

DROP TABLE t1;

#
# Bug #13735712 SELECT W/ SUBQUERY PRODUCES MORE ROWS WHEN USING
# VARIABLES
#
CREATE TABLE t1(a INT);
INSERT/*insert trace*/ INTO t1 VALUES(9);
CREATE TABLE t2(b INT);
INSERT/*insert trace*/ INTO t2 VALUES(8);
CREATE TABLE t3(c INT);
INSERT/*insert trace*/ INTO t3 VALUES(3);

SELECT *
FROM t2 RIGHT JOIN t3 ON(c = b)
WHERE b < ALL(SELECT a FROM t1 WHERE a <= 7);
+------+------+
| b    | c    |
+------+------+
| NULL |    3 |
+------+------+
SET @var = 7;
SELECT *
FROM t2 RIGHT JOIN t3 ON(c = b)
WHERE b < ALL(SELECT a FROM t1 WHERE a <= @var);
+------+------+
| b    | c    |
+------+------+
| NULL |    3 |
+------+------+

DROP TABLE t1, t2, t3;

#
# Bug #13330886 TOO MANY ROWS WITH ALL|ANY
#
CREATE TABLE t1 (a INT, b INT);
INSERT/*insert trace*/ INTO t1 VALUES (NULL,8), (8,7);
CREATE TABLE t2 (c INT);
INSERT/*insert trace*/ INTO t2 VALUES (10);

SELECT 1 FROM t2 WHERE c > ALL (SELECT a FROM t1 WHERE b >= 3);
+---+
| 1 |
+---+
+---+
SET @var = 3;
SELECT 1 FROM t2 WHERE c > ALL (SELECT a FROM t1 WHERE b >= @var);
+---+
| 1 |
+---+
+---+

DROP TABLE t1, t2;

CREATE TABLE t1 (a INT NOT NULL, b INT NOT NULL);
INSERT/*insert trace*/ INTO t1 VALUES (0,8), (8,7);
CREATE TABLE t2 (c INT NOT NULL);
INSERT/*insert trace*/ INTO t2 VALUES (10);

SELECT 1 FROM t2 WHERE c > ANY (SELECT a FROM t1 WHERE b >= 3) IS TRUE;
+---+
| 1 |
+---+
| 1 |
+---+
SELECT 1 FROM t2 WHERE c > ANY (SELECT a FROM t1 WHERE b >= 3) IS TRUE;
+---+
| 1 |
+---+
| 1 |
+---+

DROP TABLE t1, t2;

# Bug #18014565 - WRONG RESULT COMPUTATION USING ALL() AND GROUP BY
#
CREATE TABLE t1 (
  f1 INTEGER,
  f2 INTEGER
);

INSERT/*insert trace*/ INTO t1 VALUES (1,3),(1,6),(2,3),(2,6);

SELECT f1, SUM(f2) AS sum FROM t1 GROUP BY f1 HAVING sum > ALL (SELECT 1);
+------+------+
| f1   | sum  |
+------+------+
|    1 |    9 |
|    2 |    9 |
+------+------+

DROP TABLE t1;

# End of test for Bug#18014565
