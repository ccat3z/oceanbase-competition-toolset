drop database if exists hualong;
create database hualong;
use hualong;
CREATE TABLE `cb_dep_acct_54` ( `acctnbr` bigint(20) NOT NULL, `curracctstatcd` varchar(4) NOT NULL, PRIMARY KEY (`acctnbr`)) partition by hash(acctnbr) partitions 5;
CREATE TABLE `cb_dep_acctbal_54` ( `acctnbr` bigint(20) NOT NULL, `balcatcd` varchar(4) NOT NULL, `baltypcd` varchar(4) NOT NULL, PRIMARY KEY (`acctnbr`, `balcatcd`, `baltypcd`));
CREATE TABLE `cb_dep_rxtnbal_54` ( `acctnbr` varchar(34) NOT NULL, `rtxnnbr` bigint(20) NOT NULL, `balcatcd` varchar(4) NOT NULL, `baltypcd` varchar(4) NOT NULL);
insert into cb_dep_acct_54 values (1, 'CLS');
insert into cb_dep_acct_54 values (2, 'CLS');
insert into cb_dep_acct_54 values (3, 'CCC');
insert into cb_dep_acctbal_54 values (1, 3, 4);
insert into cb_dep_acctbal_54 values (3, 7, 9);
insert into cb_dep_acctbal_54 values (5, 6, 2333);
insert into cb_dep_rxtnbal_54 values (1, 4, 3, 2);
explain basic select * from cb_dep_acctbal_54 s,  cb_dep_acct_54 a where s.acctnbr = a.acctnbr and (a.curracctstatcd != 'CLS' or (a.curracctstatcd = 'CLS' and exists(select 1 from cb_dep_rxtnbal_54 r where r.acctnbr = a.acctnbr)));
Query Plan
============================================
|ID|OPERATOR                      |NAME    |
--------------------------------------------
|0 |SUBPLAN FILTER                |        |
|1 | PX COORDINATOR               |        |
|2 |  EXCHANGE OUT DISTR          |:EX10001|
|3 |   NESTED-LOOP JOIN           |        |
|4 |    EXCHANGE IN DISTR         |        |
|5 |     EXCHANGE OUT DISTR (PKEY)|:EX10000|
|6 |      TABLE SCAN              |s       |
|7 |    PX PARTITION ITERATOR     |        |
|8 |     TABLE GET                |a       |
|9 | TABLE SCAN                   |r       |
============================================

Outputs & filters: 
-------------------------------------
  0 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [a.acctnbr], [a.curracctstatcd]), filter([a.curracctstatcd != 'CLS' OR a.curracctstatcd = 'CLS' AND (T_OP_EXISTS, subquery(1))]), 
      exec_params_([cast(a.acctnbr, DECIMAL(20, 0))]), onetime_exprs_(nil), init_plan_idxs_(nil)
  1 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [a.acctnbr], [a.curracctstatcd], [a.curracctstatcd != 'CLS'], [a.curracctstatcd = 'CLS']), filter(nil)
  2 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [a.acctnbr], [a.curracctstatcd], [a.curracctstatcd != 'CLS'], [a.curracctstatcd = 'CLS']), filter(nil), dop=1
  3 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [a.acctnbr], [a.curracctstatcd], [a.curracctstatcd != 'CLS'], [a.curracctstatcd = 'CLS']), filter(nil), 
      conds(nil), nl_params_([s.acctnbr])
  4 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [PARTITION_ID]), filter(nil)
  5 - (#keys=1, [s.acctnbr]), output([s.acctnbr], [s.balcatcd], [s.baltypcd], [PARTITION_ID]), filter(nil), is_single, dop=1
  6 - output([s.acctnbr], [s.balcatcd], [s.baltypcd]), filter(nil), 
      access([s.acctnbr], [s.balcatcd], [s.baltypcd]), partitions(p0)
  7 - output([a.acctnbr], [a.curracctstatcd], [a.curracctstatcd != 'CLS'], [a.curracctstatcd = 'CLS']), filter(nil)
  8 - output([a.acctnbr], [a.curracctstatcd], [a.curracctstatcd != 'CLS'], [a.curracctstatcd = 'CLS']), filter([a.curracctstatcd != 'CLS' OR a.curracctstatcd = 'CLS']), 
      access([a.acctnbr], [a.curracctstatcd]), partitions(p[0-4])
  9 - output([1]), filter([cast(r.acctnbr, DECIMAL(-1, -1)) = ?]), 
      access([r.acctnbr]), partitions(p0), 
      limit(1), offset(nil)

explain basic select * from cb_dep_acctbal_54 s,  cb_dep_acct_54 a where s.acctnbr = a.acctnbr and (a.curracctstatcd != 'CLS' or (a.curracctstatcd = 'CLS' and exists(select 1 from cb_dep_rxtnbal_54 r where r.acctnbr = a.acctnbr) and exists(select 1 from cb_dep_rxtnbal_54 r where r.acctnbr != a.acctnbr)));
Query Plan
============================================
|ID|OPERATOR                      |NAME    |
--------------------------------------------
|0 |SUBPLAN FILTER                |        |
|1 | PX COORDINATOR               |        |
|2 |  EXCHANGE OUT DISTR          |:EX10001|
|3 |   NESTED-LOOP JOIN           |        |
|4 |    EXCHANGE IN DISTR         |        |
|5 |     EXCHANGE OUT DISTR (PKEY)|:EX10000|
|6 |      TABLE SCAN              |s       |
|7 |    PX PARTITION ITERATOR     |        |
|8 |     TABLE GET                |a       |
|9 | TABLE SCAN                   |r       |
|10| TABLE SCAN                   |r       |
============================================

Outputs & filters: 
-------------------------------------
  0 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [a.acctnbr], [a.curracctstatcd]), filter([a.curracctstatcd != 'CLS' OR (T_OP_AND, a.curracctstatcd = 'CLS', (T_OP_EXISTS, subquery(1)), (T_OP_EXISTS, subquery(2)))]), 
      exec_params_([cast(a.acctnbr, DECIMAL(20, 0))], [cast(a.acctnbr, DECIMAL(20, 0))]), onetime_exprs_(nil), init_plan_idxs_(nil)
  1 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [a.acctnbr], [a.curracctstatcd], [a.curracctstatcd != 'CLS'], [a.curracctstatcd = 'CLS']), filter(nil)
  2 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [a.acctnbr], [a.curracctstatcd], [a.curracctstatcd != 'CLS'], [a.curracctstatcd = 'CLS']), filter(nil), dop=1
  3 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [a.acctnbr], [a.curracctstatcd], [a.curracctstatcd != 'CLS'], [a.curracctstatcd = 'CLS']), filter(nil), 
      conds(nil), nl_params_([s.acctnbr])
  4 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [PARTITION_ID]), filter(nil)
  5 - (#keys=1, [s.acctnbr]), output([s.acctnbr], [s.balcatcd], [s.baltypcd], [PARTITION_ID]), filter(nil), is_single, dop=1
  6 - output([s.acctnbr], [s.balcatcd], [s.baltypcd]), filter(nil), 
      access([s.acctnbr], [s.balcatcd], [s.baltypcd]), partitions(p0)
  7 - output([a.acctnbr], [a.curracctstatcd], [a.curracctstatcd != 'CLS'], [a.curracctstatcd = 'CLS']), filter(nil)
  8 - output([a.acctnbr], [a.curracctstatcd], [a.curracctstatcd != 'CLS'], [a.curracctstatcd = 'CLS']), filter([a.curracctstatcd != 'CLS' OR a.curracctstatcd = 'CLS']), 
      access([a.acctnbr], [a.curracctstatcd]), partitions(p[0-4])
  9 - output([1]), filter([cast(r.acctnbr, DECIMAL(-1, -1)) = ?]), 
      access([r.acctnbr]), partitions(p0), 
      limit(1), offset(nil)
  10 - output([1]), filter([cast(r.acctnbr, DECIMAL(-1, -1)) != ?]), 
      access([r.acctnbr]), partitions(p0), 
      limit(1), offset(nil)

explain basic select * from cb_dep_acctbal_54 s, cb_dep_acct_54 a where s.acctnbr = a.acctnbr and ((a.curracctstatcd != 'CLS' and exists(select 1 from cb_dep_acctbal_54 r where r.acctnbr = s.acctnbr)) or (a.curracctstatcd = 'CLS' and exists(select 1 from cb_dep_rxtnbal_54 r where r.acctnbr = a.acctnbr)));
Query Plan
=================================================
|ID|OPERATOR                           |NAME    |
-------------------------------------------------
|0 |MERGE UNION DISTINCT               |        |
|1 | PX COORDINATOR MERGE SORT         |        |
|2 |  EXCHANGE OUT DISTR               |:EX10001|
|3 |   NESTED-LOOP JOIN                |        |
|4 |    EXCHANGE IN DISTR              |        |
|5 |     EXCHANGE OUT DISTR (PKEY)     |:EX10000|
|6 |      TABLE SCAN                   |s       |
|7 |    PX PARTITION ITERATOR          |        |
|8 |     TABLE GET                     |a       |
|9 | SORT                              |        |
|10|  HASH JOIN                        |        |
|11|   TABLE SCAN                      |s       |
|12|   PX COORDINATOR                  |        |
|13|    EXCHANGE OUT DISTR             |:EX20001|
|14|     NESTED-LOOP JOIN              |        |
|15|      EXCHANGE IN DISTR            |        |
|16|       EXCHANGE OUT DISTR (BC2HOST)|:EX20000|
|17|        SUBPLAN SCAN               |VIEW6   |
|18|         HASH DISTINCT             |        |
|19|          TABLE SCAN               |r       |
|20|      PX PARTITION ITERATOR        |        |
|21|       TABLE GET                   |a       |
=================================================

Outputs & filters: 
-------------------------------------
  0 - output([UNION([1])], [UNION([2])], [UNION([3])], [UNION([4])], [UNION([5])]), filter(nil)
  1 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [a.acctnbr], [a.curracctstatcd]), filter(nil), sort_keys([s.acctnbr, ASC], [s.balcatcd, ASC], [s.baltypcd, ASC])
  2 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [a.acctnbr], [a.curracctstatcd]), filter(nil), dop=1
  3 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [a.acctnbr], [a.curracctstatcd]), filter(nil), 
      conds(nil), nl_params_([s.acctnbr])
  4 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [PARTITION_ID]), filter(nil)
  5 - (#keys=1, [s.acctnbr]), output([s.acctnbr], [s.balcatcd], [s.baltypcd], [PARTITION_ID]), filter(nil), is_single, dop=1
  6 - output([s.acctnbr], [s.balcatcd], [s.baltypcd]), filter(nil), 
      access([s.acctnbr], [s.balcatcd], [s.baltypcd]), partitions(p0)
  7 - output([a.acctnbr], [a.curracctstatcd]), filter(nil)
  8 - output([a.acctnbr], [a.curracctstatcd]), filter([a.curracctstatcd != 'CLS']), 
      access([a.acctnbr], [a.curracctstatcd]), partitions(p[0-4])
  9 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [a.acctnbr], [a.curracctstatcd]), filter(nil), sort_keys([s.acctnbr, ASC], [s.balcatcd, ASC], [s.baltypcd, ASC], [a.acctnbr, ASC], [a.curracctstatcd, ASC])
  10 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [a.acctnbr], [a.curracctstatcd]), filter(nil), 
      equal_conds([s.acctnbr = a.acctnbr]), other_conds(nil)
  11 - output([s.acctnbr], [s.balcatcd], [s.baltypcd]), filter(nil), 
      access([s.acctnbr], [s.balcatcd], [s.baltypcd]), partitions(p0)
  12 - output([a.acctnbr], [a.curracctstatcd]), filter(nil)
  13 - output([a.acctnbr], [a.curracctstatcd]), filter(nil), dop=1
  14 - output([a.acctnbr], [a.curracctstatcd]), filter(nil), 
      conds(nil), nl_params_([VIEW6.cast(VIEW4.r.acctnbr, DECIMAL(-1, -1))])
  15 - output([VIEW6.cast(VIEW4.r.acctnbr, DECIMAL(-1, -1))]), filter(nil)
  16 - output([VIEW6.cast(VIEW4.r.acctnbr, DECIMAL(-1, -1))]), filter(nil), is_single, dop=1
  17 - output([VIEW6.cast(VIEW4.r.acctnbr, DECIMAL(-1, -1))]), filter(nil), 
      access([VIEW6.cast(VIEW4.r.acctnbr, DECIMAL(-1, -1))])
  18 - output([cast(r.acctnbr, DECIMAL(-1, -1))]), filter(nil), 
      distinct([cast(r.acctnbr, DECIMAL(-1, -1))])
  19 - output([cast(r.acctnbr, DECIMAL(-1, -1))]), filter(nil), 
      access([r.acctnbr]), partitions(p0)
  20 - output([a.acctnbr], [a.curracctstatcd]), filter(nil)
  21 - output([a.acctnbr], [a.curracctstatcd]), filter([a.curracctstatcd = 'CLS']), 
      access([a.acctnbr], [a.curracctstatcd]), partitions(p[0-4])

explain basic select * from cb_dep_acctbal_54 s,  cb_dep_acct_54 a where s.acctnbr = a.acctnbr and (a.curracctstatcd != 'CLS' or (a.curracctstatcd = 'CLS' and exists(select 1 from cb_dep_rxtnbal_54 r where r.acctnbr = a.acctnbr))) group by s.acctnbr;
Query Plan
==============================================
|ID|OPERATOR                        |NAME    |
----------------------------------------------
|0 |MERGE GROUP BY                  |        |
|1 | SORT                           |        |
|2 |  SUBPLAN FILTER                |        |
|3 |   PX COORDINATOR               |        |
|4 |    EXCHANGE OUT DISTR          |:EX10001|
|5 |     NESTED-LOOP JOIN           |        |
|6 |      EXCHANGE IN DISTR         |        |
|7 |       EXCHANGE OUT DISTR (PKEY)|:EX10000|
|8 |        TABLE SCAN              |s       |
|9 |      PX PARTITION ITERATOR     |        |
|10|       TABLE GET                |a       |
|11|   TABLE SCAN                   |r       |
==============================================

Outputs & filters: 
-------------------------------------
  0 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [a.acctnbr], [a.curracctstatcd]), filter(nil), 
      group([s.acctnbr]), agg_func(nil)
  1 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [a.acctnbr], [a.curracctstatcd]), filter(nil), sort_keys([s.acctnbr, ASC])
  2 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [a.acctnbr], [a.curracctstatcd]), filter([a.curracctstatcd != 'CLS' OR a.curracctstatcd = 'CLS' AND (T_OP_EXISTS, subquery(1))]), 
      exec_params_([cast(a.acctnbr, DECIMAL(20, 0))]), onetime_exprs_(nil), init_plan_idxs_(nil)
  3 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [a.acctnbr], [a.curracctstatcd], [a.curracctstatcd != 'CLS'], [a.curracctstatcd = 'CLS']), filter(nil)
  4 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [a.acctnbr], [a.curracctstatcd], [a.curracctstatcd != 'CLS'], [a.curracctstatcd = 'CLS']), filter(nil), dop=1
  5 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [a.acctnbr], [a.curracctstatcd], [a.curracctstatcd != 'CLS'], [a.curracctstatcd = 'CLS']), filter(nil), 
      conds(nil), nl_params_([s.acctnbr])
  6 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [PARTITION_ID]), filter(nil)
  7 - (#keys=1, [s.acctnbr]), output([s.acctnbr], [s.balcatcd], [s.baltypcd], [PARTITION_ID]), filter(nil), is_single, dop=1
  8 - output([s.acctnbr], [s.balcatcd], [s.baltypcd]), filter(nil), 
      access([s.acctnbr], [s.balcatcd], [s.baltypcd]), partitions(p0)
  9 - output([a.acctnbr], [a.curracctstatcd], [a.curracctstatcd != 'CLS'], [a.curracctstatcd = 'CLS']), filter(nil)
  10 - output([a.acctnbr], [a.curracctstatcd], [a.curracctstatcd != 'CLS'], [a.curracctstatcd = 'CLS']), filter([a.curracctstatcd != 'CLS' OR a.curracctstatcd = 'CLS']), 
      access([a.acctnbr], [a.curracctstatcd]), partitions(p[0-4])
  11 - output([1]), filter([cast(r.acctnbr, DECIMAL(-1, -1)) = ?]), 
      access([r.acctnbr]), partitions(p0), 
      limit(1), offset(nil)

explain basic select /*+ no_use_hash_aggregation */ * from cb_dep_acctbal_54 s,  cb_dep_acct_54 a where s.acctnbr = a.acctnbr and (a.curracctstatcd != 'CLS' or (a.curracctstatcd = 'CLS' and exists(select 1 from cb_dep_rxtnbal_54 r where r.acctnbr = a.acctnbr))) group by a.acctnbr;
Query Plan
==============================================
|ID|OPERATOR                        |NAME    |
----------------------------------------------
|0 |MERGE GROUP BY                  |        |
|1 | SORT                           |        |
|2 |  SUBPLAN FILTER                |        |
|3 |   PX COORDINATOR               |        |
|4 |    EXCHANGE OUT DISTR          |:EX10001|
|5 |     NESTED-LOOP JOIN           |        |
|6 |      EXCHANGE IN DISTR         |        |
|7 |       EXCHANGE OUT DISTR (PKEY)|:EX10000|
|8 |        TABLE SCAN              |s       |
|9 |      PX PARTITION ITERATOR     |        |
|10|       TABLE GET                |a       |
|11|   TABLE SCAN                   |r       |
==============================================

Outputs & filters: 
-------------------------------------
  0 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [a.acctnbr], [a.curracctstatcd]), filter(nil), 
      group([a.acctnbr]), agg_func(nil)
  1 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [a.acctnbr], [a.curracctstatcd]), filter(nil), sort_keys([a.acctnbr, ASC])
  2 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [a.acctnbr], [a.curracctstatcd]), filter([a.curracctstatcd != 'CLS' OR a.curracctstatcd = 'CLS' AND (T_OP_EXISTS, subquery(1))]), 
      exec_params_([cast(a.acctnbr, DECIMAL(20, 0))]), onetime_exprs_(nil), init_plan_idxs_(nil)
  3 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [a.acctnbr], [a.curracctstatcd], [a.curracctstatcd != 'CLS'], [a.curracctstatcd = 'CLS']), filter(nil)
  4 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [a.acctnbr], [a.curracctstatcd], [a.curracctstatcd != 'CLS'], [a.curracctstatcd = 'CLS']), filter(nil), dop=1
  5 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [a.acctnbr], [a.curracctstatcd], [a.curracctstatcd != 'CLS'], [a.curracctstatcd = 'CLS']), filter(nil), 
      conds(nil), nl_params_([s.acctnbr])
  6 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [PARTITION_ID]), filter(nil)
  7 - (#keys=1, [s.acctnbr]), output([s.acctnbr], [s.balcatcd], [s.baltypcd], [PARTITION_ID]), filter(nil), is_single, dop=1
  8 - output([s.acctnbr], [s.balcatcd], [s.baltypcd]), filter(nil), 
      access([s.acctnbr], [s.balcatcd], [s.baltypcd]), partitions(p0)
  9 - output([a.acctnbr], [a.curracctstatcd], [a.curracctstatcd != 'CLS'], [a.curracctstatcd = 'CLS']), filter(nil)
  10 - output([a.acctnbr], [a.curracctstatcd], [a.curracctstatcd != 'CLS'], [a.curracctstatcd = 'CLS']), filter([a.curracctstatcd != 'CLS' OR a.curracctstatcd = 'CLS']), 
      access([a.acctnbr], [a.curracctstatcd]), partitions(p[0-4])
  11 - output([1]), filter([cast(r.acctnbr, DECIMAL(-1, -1)) = ?]), 
      access([r.acctnbr]), partitions(p0), 
      limit(1), offset(nil)

drop database hualong;
