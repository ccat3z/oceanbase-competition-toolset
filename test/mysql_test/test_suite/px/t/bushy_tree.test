--disable_query_log
set @@session.explicit_defaults_for_timestamp=off;
--enable_query_log

#tags: optimizer
--disable_warnings
drop table if exists t1,t2,t3,t4,t;
--enable_warnings
create table t1 (pk int primary key, c1 int);
create table t2 (pk int primary key, c1 int);
create table t3 (pk int primary key, c1 int);
create table t4 (pk int primary key, c1 int);

--disable_query_log
insert into t1 values (1,1);
insert into t1 values (2,2);
insert into t1 values (3,3);
insert into t2 values (1,1);
insert into t2 values (2,2);
insert into t2 values (3,3);
insert into t3 values (1,1);
insert into t3 values (2,2);
insert into t3 values (3,3);
insert into t4 values (1,1);
insert into t4 values (2,2);
insert into t4 values (3,3);
--enable_query_log

--explain_protocol 0
--result_format 4

## right-deep tree
select /*+leading(t1 t2 t3)*/ t1.c1, t2.c1, t3.c1 from t1, t2, t3 where t1.pk = t2.pk and t2.pk = t3.pk;
select /*+leading(t1 t2 t3), USE_PX parallel(2)*/ t1.c1, t2.c1, t3.c1 from t1, t2, t3 where t1.pk = t2.pk and t2.pk = t3.pk;

select /*+leading(t1 t2 t3 t4)*/ t1.c1, t2.c1, t3.c1, t4.c1 from t1, t2, t3, t4 where t1.pk = t2.pk and t3.pk = t4.pk and t2.pk = t3.pk;
select /*+leading(t1 t2 t3 t4), USE_PX parallel(2)*/ t1.c1, t2.c1, t3.c1, t4.c1 from t1, t2, t3, t4 where t1.pk = t2.pk and t3.pk = t4.pk and t2.pk = t3.pk;

## semi join
select * from (select max(t1.c1 + t2.c1) as a from t1, t2 where t1.pk =t2.pk) subq where subq.a >any (select t3.c1 + t4.c1 from t3, t4 where t3.pk = t4.pk);
select /*+USE_PX parallel(2)*/ * from (select max(t1.c1 + t2.c1) as a from t1, t2 where t1.pk =t2.pk) subq where subq.a >any (select t3.c1 + t4.c1 from t3, t4 where t3.pk = t4.pk);

## anti join
select * from (select max(t1.c1 + t2.c1) as a from t1, t2 where t1.pk =t2.pk) subq where subq.a >all (select t3.c1 + t4.c1 from t3, t4 where t3.pk = t4.pk);
select /*+USE_PX parallel(2)*/ * from (select max(t1.c1 + t2.c1) as a from t1, t2 where t1.pk =t2.pk) subq where subq.a >all (select t3.c1 + t4.c1 from t3, t4 where t3.pk = t4.pk);

##bushy
select /*+leading((t1 t2) (t3 t4))*/ t1.c1, t2.c1, t3.c1, t4.c1 from t1, t2, t3, t4 where t1.pk = t2.pk and t3.pk = t4.pk and t2.pk = t3.pk;
select /*+USE_PX parallel(2), leading((t1 t2) (t3 t4))*/ t1.c1, t2.c1, t3.c1, t4.c1 from t1, t2, t3, t4 where t1.pk = t2.pk and t3.pk = t4.pk and t2.pk = t3.pk;

## union
select * from ((select t1.c1 as a, t2.c1 as b from t1, t2 where t1.pk = t2.pk order by t1.c1 limit 2) union (select t3.c1 as a, t4.c1 as b from t3, t4 where t3.pk = t4.pk order by t3.c1 limit 2));
select /*+USE_PX parallel(2)*/ * from ((select t1.c1 as a, t2.c1 as b from t1, t2 where t1.pk = t2.pk order by t1.c1 limit 2) union (select t3.c1 as a, t4.c1 as b from t3, t4 where t3.pk = t4.pk order by t3.c1 limit 2));

## subplan filter
select * from (select t1.c1 as a, t2.c1 as b from t1, t2 where t1.pk =t2.pk) subq where subq.a > (select count(*) from t3, t4 where t3.pk = t4.pk);
select /*+USE_PX parallel(2)*/ * from (select t1.c1 as a, t2.c1 as b from t1, t2 where t1.pk =t2.pk) subq where subq.a > (select count(*) from t3, t4 where t3.pk = t4.pk);

## insert into select with right-deep tree
create table t(c1 int, c2 int, c3 int, c4 int);
insert into t select /*+leading(t1 t2 t3 t4)*/ t1.c1, t2.c1, t3.c1, t4.c1 from t1, t2, t3, t4 where t1.pk = t2.pk and t3.pk = t4.pk and t2.pk = t3.pk;
select/**/ * from t;

--disable_query_log
delete/**/ from t;
--enable_query_log
insert into t select /*+USE_PX parallel(2), leading(t1 t2 t3 t4)*/ t1.c1, t2.c1, t3.c1, t4.c1 from t1, t2, t3, t4 where t1.pk = t2.pk and t3.pk = t4.pk and t2.pk = t3.pk;
select/**/ * from t;

## insert into select with bushy tree
--disable_query_log
delete/**/ from t;
--enable_query_log
insert into t select /*+leading((t1 t2) (t3 t4))*/ t1.c1, t2.c1, t3.c1, t4.c1 from t1, t2, t3, t4 where t1.pk = t2.pk and t3.pk = t4.pk and t2.pk = t3.pk;
select/**/ * from t;

## bushy tree case
--disable_warnings
drop table t1,t2,t3,t4;
--enable_warnings

create table t1(c1 int primary key, c2 int) partition by hash (c1) partitions 5;
create table t2(c1 int primary key, c2 int) partition by hash (c1) partitions 6;
create table t3(c1 int primary key, c2 int) partition by hash (c1) partitions 7;
create table t4(c1 int primary key, c2 int) partition by hash (c1) partitions 8;

--disable_query_log
insert/**/ into t1 values (1,1);
insert/**/ into t1 values (2,2);
insert/**/ into t1 values (3,3);
insert/**/ into t2 values (1,1);
insert/**/ into t2 values (2,2);
insert/**/ into t2 values (3,3);
insert/**/ into t3 values (1,1);
insert/**/ into t3 values (2,2);
insert/**/ into t3 values (3,3);
insert/**/ into t4 values (1,1);
insert/**/ into t4 values (2,2);
insert/**/ into t4 values (3,3);
--enable_query_log

--sorted_result
select /*+parallel(3) pq_distribute(t2 hash hash) pq_distribute(t4 hash hash)*/ * from t1,t2 where t1.c1=t2.c1 union all
select /*+parallel(3) pq_distribute(t2 hash hash) pq_distribute(t4 hash hash)*/ * from t3,t4 where t3.c1=t4.c1 union all
select /*+parallel(3) pq_distribute(t3 hash hash)*/ * from t1,t3 where t1.c1=t3.c1;

--sorted_result
select /*+parallel(3) pq_distribute(t2 hash hash) pq_distribute(t4 hash hash)*/ * from t1,t2 where t1.c1=t2.c1 union all
select /*+parallel(3) pq_distribute(t2 hash hash) pq_distribute(t4 hash hash)*/ * from t3,t4 where t3.c1=t4.c1;

drop table t1,t2,t3,t4,t;
