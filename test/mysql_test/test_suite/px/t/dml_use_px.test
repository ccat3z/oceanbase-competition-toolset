--disable_query_log
set @@session.explicit_defaults_for_timestamp=off;
--enable_query_log
# 测试 dml 查询部分打开px
# tags: dml, px, optimizer
# dml查询部分打开px，必须使用 USE_PX hint
--result_format 4
--disable_warnings
drop table if exists s,p,p4,no_p,temp_s,temp_p,temp_p4,temp_p5;

create table s(c1 int primary key, c2 int ,c3 int);
create table p(c1 int primary key, c2 int ,c3 int) partition by hash(c1)  partitions 4;
create table p4(c1 int primary key, c2 int ,c3 int) partition by hash(c1)  partitions 4;
create table no_p(c1 int, c2 int ,c3 int) partition by hash(c1)  partitions 4;
create table temp_s(c1 int, c2 int, c3 int);
create table temp_p(c1 int, c2 int ,c3 int) partition by hash(c1)  partitions 4;
create table temp_p4(c1 int, c2 int ,c3 int) partition by hash(c1)  partitions 4;
create table temp_p5(c1 int, c2 int ,c3 int) partition by hash(c1)  partitions 5;

## delete测试
insert into s(c1,c2) values(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9),(10,10);
# 非分区表，parallel不大于1，不启用px
delete /*+use_px*/ from s;
select * from s order by c1;
insert into s(c1,c2) values(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9),(10,10);
# 非分区表，parallel大于1，启用px
delete /*+use_px, parallel(10)*/ from s;
select * from s order by c1;

# 分区表测试
insert into p(c1,c2) values(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9),(10,10);
delete /*+use_px,parallel(10)*/ from p;
select * from p order by c1;

insert into p(c1,c2) values(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9),(10,10);
delete /*+use_px,parallel(10)*/ from p where c1 >= 5;
select * from p order by c1;
delete from p;

insert into p(c1,c2) values(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9),(10,10);
delete /*+use_px,parallel(10)*/ from p where c1 = 5;
select * from p order by c1;
delete from p;

# partition wise join
insert into p(c1,c2) values(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9),(10,10);
insert into p4(c1,c2) values(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9),(10,10);
delete /*+use_px, parallel(10)*/ p from p,p4 where p.c1 = p4.c1 and p.c1 >= 5;
select * from p order by c1;
delete from p;

# 非 partition wise join，会经过pkey，形成回退的multi part计划
insert into p(c1,c2) values(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9),(10,10);
# 存在pkey，计划回退成multi part
delete /*+use_px, parallel(10)*/ p from p,p4 where p.c1 = p4.c2 and p.c1 >= 5;
select * from p order by c1;
delete from p;

# 多表删除
insert into p(c1,c2) values(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9),(10,10);
insert into s(c1,c2) values(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9),(10,10);
delete /*+use_px,parallel(10)*/ s,p from s,p;
select * from p order by c1;
select * from s order by c1;

# 删除非分区表或者单分区（开启分区内并行，但是DML仍然是非multi part）
# 删除非分区表
insert into p(c1,c2) values(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9),(10,10);
insert into s(c1,c2) values(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9),(10,10);
delete /*+use_px, parallel(10),leading(s,p),pq_distribute(p,none,broadcast)*/ s from s,p where p.c1 = s.c1;
select * from s order by c1;
insert into s(c1,c2) values(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9),(10,10);
delete /*+use_px, parallel(10)*/ s from s,p where p.c1 = s.c1;
select * from s order by c1;

# 删除分区表的一个分区
insert into s(c1,c2) values(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9),(10,10);
# dop小于2，单分区，不会产生非PX计划
delete /*+use_px, parallel(10)*/ p from s,p where p.c1 = s.c1 and p.c1 = 1;
select * from p order by c1;
delete from p;
delete from s;

insert into p(c1,c2) values(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9),(10,10);
# dop = 1， 针对单分区，不会启用分区内并行，所有p所对应的分区location是local（c模式），remote（slave模式）
# 在c模式下会产生local+local的计划，在slave模式下remote+remote，并且分配了EX，变为multi part计划
delete /*+use_px, parallel(1)*/ p from p4,p where p.c1 = p4.c2 and p4.c2 = 4;
select * from p order by c1;
delete from p;
insert into p(c1,c2) values(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9),(10,10);
delete /*+use_px, parallel(10)*/ p from p4,p where p.c1 = p4.c2 and p4.c2 = 4;
select * from p order by c1;
delete from p;
delete from p4;


## update测试
# 非分区表，parallel大于1，启用px
insert into s(c1,c2) values(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9),(10,10);
update /*+use_px, parallel(10)*/ s set s.c2 = 20 where s.c1 >=5;
select * from s order by c1;
delete from s;

# 更新主键
insert into s(c1,c2) values(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9),(10,10);
update /*+use_px, parallel(10)*/ s set s.c1 = 20 where s.c2 = 5;
select * from s order by c1;
delete from s;

# 分区表
insert into p(c1,c2) values(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9),(10,10);
update /*+use_px, parallel(10)*/ p set p.c3 = 20 where p.c1 >= 5;
select * from p order by c1;
delete from p;

insert into p(c1,c2) values(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9),(10,10);
update /*+use_px, parallel(10)*/ p set p.c1 = 20 where p.c1 = 5;
select * from p order by c1;
delete from p;

insert into p(c1,c2) values(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9),(10,10);
update /*+use_px, parallel(10)*/ p as pp set pp.c3 = 20 where pp.c1 >= 5;
select * from p order by c1;
delete from p;

# 跟新无主键表
insert into no_p(c1,c2) values(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9),(10,10);
update /*+use_px, parallel(10)*/ no_p set no_p.c1 = 20 where no_p.c1 >= 5;
select * from no_p order by c2;
delete from no_p;

## insert测试：insert插入的表是local的非分区表/单分区的计划是非multi part，其他都是multi part计划
## insert不会出现GI算子在insert算子头上的计划
insert into temp_p(c1,c2) values(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9),(10,10);
insert into temp_s(c1,c3) values(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9),(10,10);
insert into temp_p4(c1,c2) values(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9),(10,10);
insert into temp_p5(c1,c2) values(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9),(10,10);

insert /*+use_px*/ into s select * from temp_s;
select * from s order by c1;
delete from s;

insert /*+use_px,parallel(10)*/ into s select * from temp_s;
select * from s order by c1;
delete from s;

insert /*+use_px,parallel(10)*/ into s select * from temp_p where temp_p.c2 >= 5;
select * from s order by c1;
delete from s;

insert /*+use_px,parallel(10)*/ into s select temp_p.c1,temp_p.c2,temp_s.c3 from temp_p,temp_s where temp_p.c1 = temp_s.c1;
select * from s order by c1;
delete from s;

# 插入多分区表
insert /*+use_px,parallel(10)*/ into p select * from temp_s;
select * from p order by c1;
delete from p;

insert /*+use_px,parallel(10)*/ into p select * from temp_p;
select * from p order by c1;
delete from p;

insert /*+use_px, parallel(10)*/ into p select temp_p.c1,temp_p.c2,temp_p.c3 from temp_p,temp_p5 where temp_p.c1 = temp_p5.c1;
select * from p order by c1;
delete from p;

insert /*+use_px, parallel(10)*/ into p select temp_p.c1,temp_p.c2,temp_p.c3 from temp_p,temp_p5 where temp_p.c1 = temp_p5.c1 and temp_p.c1 = 3;
select * from p order by c1;
delete from p;

# full partition wise join insert
insert /*+use_px, parallel(10)*/ into p select  temp_p.c1, temp_p.c2, temp_p.c3 from temp_p, temp_p4 where temp_p.c1 = temp_p4.c1;
select * from p order by c1;
delete from p;

insert /*+use_px,parallel(10)*/ into p select temp_p.c1,temp_p.c2,temp_s.c3 from temp_p,temp_s where temp_p.c1 = temp_s.c1;
select * from p order by c1;
delete from p;

## replace / insert on duplicate 计划
## 目前replace / insert on duplicate计划是不支持PX

# 清理测试
drop table if exists s,p,p4,no_p,temp_s,temp_p,temp_p4,temp_p5;
