drop table if exists t1,t2,t3,t4,t5,t6;
set collation_connection='utf8mb4_general_ci';
drop view if exists v1,v2,v3,v4,v5,v6;
drop table if exists ob_adgroup,ob_bidword;
create table t1(c1 int primary key, c2 int) ;
create table t2(c1 int primary key, c2 int, c3 varchar(32));
create table t3(c3 int primary key, c4 int);
create table t4(c1 int primary key, c2 int not null, c3 int default 1, c4 int not null default 2);
insert into t1 values(1,2);
insert into t2 values(1,2,3);
insert into t3 values(3,4);
insert into t4 values(1,2,3,4);
SELECT * FROM t1 LEFT JOIN t2 USING (c1) , t2 z JOIN t4 USING (c1) WHERE t1.c1=z.c1 order by 1;
c1	c2	c2	c3	c1	c2	c3	c2	c3	c4
1	2	2	3	1	2	3	2	3	4
drop table t1,t2,t3,t4;
CREATE TABLE t1 (c1 int);
SELECT c1 FROM t1 AS table1 INNER JOIN t1 AS table2 USING ( c1 ) LEFT JOIN t1 AS table3 USING ( c1 ) LEFT OUTER JOIN t1 AS table4 USING ( c1  )  order by 1;
c1
drop table t1;
CREATE TABLE t1 (p1 INT PRIMARY KEY, a CHAR(1));
CREATE TABLE t2 (p2 INT PRIMARY KEY, b CHAR(1));
INSERT INTO t1 VALUES (1,'a'),(2,'b'),(3,'c');
INSERT INTO t2 VALUES (1,'h'),(2,'i'),(3,'j'),(4,'k');
CREATE VIEW v1 AS SELECT * FROM t1;
CREATE VIEW v2 AS SELECT * FROM t2;
select * from v1 left join v2 on a=b order by 1;
p1	a	p2	b
1	a	NULL	NULL
2	b	NULL	NULL
3	c	NULL	NULL
DROP VIEW v1, v2;
DROP TABLE t1, t2;
CREATE TABLE t1 (p1 INT PRIMARY KEY, a VARCHAR(1));
CREATE TABLE t2 (p2 INT PRIMARY KEY, b VARCHAR(1));
INSERT INTO t1 VALUES (1,'a'),(2,'b'),(3,'c');
INSERT INTO t2 VALUES (1,'h'),(2,'i'),(3,'j'),(4,'k');
CREATE VIEW v1 AS SELECT * FROM t1;
CREATE VIEW v2 AS SELECT * FROM t2;
select * from v1 left join v2 on a=b order by 1;
p1	a	p2	b
1	a	NULL	NULL
2	b	NULL	NULL
3	c	NULL	NULL
DROP VIEW v1, v2;
DROP TABLE t1, t2;
CREATE TABLE t1 (p1 INT PRIMARY KEY, a TIMESTAMP(6) default '2010-10-10 10:10:10.000001');
CREATE TABLE t2 (p2 INT PRIMARY KEY, b TIMESTAMP(6) default '2010-10-10 10:10:10.000001');
INSERT INTO t1(p1) VALUES (1);
INSERT INTO t2(p2) VALUES (1),(2);
CREATE VIEW v1 AS SELECT * FROM t1;
CREATE VIEW v2 AS SELECT * FROM t2;
select * from v1 left join v2 on a=b order by 1;
p1	a	p2	b
1	2010-10-10 10:10:10.000001	1	2010-10-10 10:10:10.000001
1	2010-10-10 10:10:10.000001	2	2010-10-10 10:10:10.000001
DROP VIEW v1, v2;
DROP TABLE t1, t2;
create table t1(grp_id bigint, row_id bigint, KEY t11 (grp_id));
insert into t1 values(45, 270);
insert into t1 values(45, 271);
insert into t1 values(45, 272);
create table t2(grp_id bigint, row_hex varchar(2048), KEY t21 (grp_id));
insert into t2 values(45, '000000000000000000000000000000000000000000000000000000000000010e');
insert into t2 values(45, '000000000000000000000000000000000000000000000000000000000000010f');
insert into t2 values(45, '0000000000000000000000000000000000000000000000000000000000000110');
insert into t2 values(45, '0000000000000000000000000000000000000000000000000000000000000111');
insert into t2 values(45, '0000000000000000000000000000000000000000000000000000000000000112');
insert into t2 values(45, '0000000000000000000000000000000000000000000000000000000000000113');
select /*+use_merge(t1,t2)*/ t1.grp_id as t1grpid, t2.grp_id as t2grpid, t1.row_id as t1rowid, t2.row_hex as t2rowhex  FROM t1 inner join t2 on t1.grp_id = t2.grp_id  order by t1.row_id, t2.row_hex;
t1grpid	t2grpid	t1rowid	t2rowhex
45	45	270	000000000000000000000000000000000000000000000000000000000000010e
45	45	270	000000000000000000000000000000000000000000000000000000000000010f
45	45	270	0000000000000000000000000000000000000000000000000000000000000110
45	45	270	0000000000000000000000000000000000000000000000000000000000000111
45	45	270	0000000000000000000000000000000000000000000000000000000000000112
45	45	270	0000000000000000000000000000000000000000000000000000000000000113
45	45	271	000000000000000000000000000000000000000000000000000000000000010e
45	45	271	000000000000000000000000000000000000000000000000000000000000010f
45	45	271	0000000000000000000000000000000000000000000000000000000000000110
45	45	271	0000000000000000000000000000000000000000000000000000000000000111
45	45	271	0000000000000000000000000000000000000000000000000000000000000112
45	45	271	0000000000000000000000000000000000000000000000000000000000000113
45	45	272	000000000000000000000000000000000000000000000000000000000000010e
45	45	272	000000000000000000000000000000000000000000000000000000000000010f
45	45	272	0000000000000000000000000000000000000000000000000000000000000110
45	45	272	0000000000000000000000000000000000000000000000000000000000000111
45	45	272	0000000000000000000000000000000000000000000000000000000000000112
45	45	272	0000000000000000000000000000000000000000000000000000000000000113
drop table t1,t2;
create table t1(a bigint primary key, b char(12), c char(20), index idx1(b));
create table t2(a bigint primary key, b char(12));
INSERT INTO t1  ( a ,  b ) VALUES ( 1 ,'a' ),( 2 , 1);
SELECT table1 . a FROM   t2 AS table1  RIGHT JOIN t1  AS table2 ON  table1 . b =  table2 . b   RIGHT JOIN t1  AS table3 ON table2 . b =  table3 . b  ;
a
NULL
NULL
drop table t1,t2;
create table t1(c1 int);
create table t2(c1 int);
create table t3(c1 int);
select /*+ use_merge(t3,t2) leading(t3,t2,t1) */* from t1,t2,t3;
c1	c1	c1
drop table t1,t2,t3;
create table ob_adgroup(custid bigint, campid varchar(10), adgrpid bigint, date datetime(6),
title char(255), detail varchar(255), c1 date, c2 datetime, c3 time, c4 year,
gmt_create datetime(6) default now(6), gmt_modified timestamp(6) default now(6), primary key(custid, campid, adgrpid, date));
create table ob_bidword(custid bigint, campid varchar(10), adgrpid bigint, bidwordid bigint, date datetime(6),
c1 int, c2 int, c3 tinyint, c4 bool, c5 smallint, c6 mediumint,
c7 float(18,6), c8 double(47,6), c9 decimal(16,6),
c10 char(255), c11 varchar(255), c12 binary(255), c13 varbinary(255),
c14 date, c15 datetime(6), c16 time, c17 year,
gmt_create datetime(6) default now(6), gmt_modified timestamp(6) default now(6), primary key(custid, campid, adgrpid, bidwordid, date));
insert into ob_bidword(custid,campid,adgrpid,bidwordid,date) values(0,0,0,0,'1992-01-01 08:00:00.000001');
insert into ob_bidword(custid,campid,adgrpid,bidwordid,date) values(0,0,0,1,'1992-01-01 08:00:00.000001');
insert into ob_adgroup(custid,campid,adgrpid,date) values(0,0,0,'1992-01-01 08:00:00.000001');
insert into ob_adgroup(custid,campid,adgrpid,date) values(0,0,1,'1992-01-01 08:00:00.000001');
select /*+query_timeout(30000000) use_merge(a,b)*/ a.custid, a.campid, a.bidwordid as a_bidwordid, a.c1, a.c4, a.c9, a.c11, a.c15, b.campid, b.adgrpid from ob_bidword as a left join ob_adgroup as b on a.custid=b.custid and a.campid=b.campid and a.adgrpid=b.adgrpid and a.date=b.date where a.custid>=0 and a.custid<=0 order by a.bidwordid;
custid	campid	a_bidwordid	c1	c4	c9	c11	c15	campid	adgrpid
0	0	0	NULL	NULL	NULL	NULL	NULL	0	0
0	0	1	NULL	NULL	NULL	NULL	NULL	0	0
drop table ob_adgroup,ob_bidword;
DROP TABLE IF EXISTS `C`;
CREATE TABLE `C` (
`col_varchar_key` varchar(1) DEFAULT NULL,
`col_int_key` int(11) DEFAULT NULL,
`col_varchar_20` varchar(20) DEFAULT NULL,
`col_varchar_20_key` varchar(20) DEFAULT NULL,
`col_varchar` varchar(1) DEFAULT NULL,
`pk` int(11) NOT NULL,
`col_varchar_10_key` varchar(10) DEFAULT NULL,
`col_varchar_10` varchar(10) DEFAULT NULL,
`col_int` int(11) DEFAULT NULL,
PRIMARY KEY (`pk`),
KEY `idx3` (`pk`, `col_varchar_key`) ,
KEY `idx1` (`pk`, `col_int_key`) ,
KEY `idx7` (`pk`, `col_varchar_20_key`) ,
KEY `idx5` (`pk`, `col_varchar_10_key`)
);
INSERT INTO `C` VALUES ('s',2,'d','z','b',1,'z','m',2),('t',5,'j','q',NULL,2,'v','a',3);
DROP TABLE IF EXISTS `D`;
CREATE TABLE `D` (
`col_varchar_key` varchar(1) DEFAULT NULL,
`pk` int(11) NOT NULL,
`col_varchar` varchar(1) DEFAULT NULL,
`col_varchar_20_key` varchar(20) DEFAULT NULL,
`col_varchar_10_key` varchar(10) DEFAULT NULL,
`col_varchar_20` varchar(20) DEFAULT NULL,
`col_int_key` int(11) DEFAULT NULL,
`col_varchar_10` varchar(10) DEFAULT NULL,
`col_int` int(11) DEFAULT NULL,
PRIMARY KEY (`pk`),
KEY `idx3` (`pk`, `col_varchar_key`) ,
KEY `idx7` (`pk`, `col_varchar_20_key`) ,
KEY `idx5` (`pk`, `col_varchar_10_key`) ,
KEY `idx1` (`pk`, `col_int_key`)
);
INSERT INTO `D` VALUES (NULL,1,'z','m','k',NULL,5,'v',4),('v',2,NULL,'d',NULL,'q',0,'e',8);
select/*+use_nl(table1 table2)*/ * FROM (C AS table1 INNER JOIN D AS table2 ON (table2.`pk` = table1.`col_int_key`)) WHERE  table1 . `col_int_key` IN (34, 59, 113) OR table1 . `col_int` > table2 . `pk`;
col_varchar_key	col_int_key	col_varchar_20	col_varchar_20_key	col_varchar	pk	col_varchar_10_key	col_varchar_10	col_int	col_varchar_key	pk	col_varchar	col_varchar_20_key	col_varchar_10_key	col_varchar_20	col_int_key	col_varchar_10	col_int
explain basic select/*+use_nl(table1 table2)*/ * FROM (C AS table1 INNER JOIN D AS table2 ON (table2.`pk` = table1.`col_int_key`)) WHERE  table1 . `col_int_key` IN (34, 59, 113) OR table1 . `col_int` > table2 . `pk`;
Query Plan
============================
|ID|OPERATOR        |NAME  |
----------------------------
|0 |NESTED-LOOP JOIN|      |
|1 | TABLE SCAN     |table2|
|2 | MATERIAL       |      |
|3 |  TABLE SCAN    |table1|
============================

Outputs & filters: 
-------------------------------------
  0 - output([table1.col_varchar_key], [table1.col_int_key], [table1.col_varchar_20], [table1.col_varchar_20_key], [table1.col_varchar], [table1.pk], [table1.col_varchar_10_key], [table1.col_varchar_10], [table1.col_int], [table2.col_varchar_key], [table2.pk], [table2.col_varchar], [table2.col_varchar_20_key], [table2.col_varchar_10_key], [table2.col_varchar_20], [table2.col_int_key], [table2.col_varchar_10], [table2.col_int]), filter(nil), 
      conds([table2.pk = table1.col_int_key], [table1.col_int_key IN (34, 59, 113) OR table1.col_int > table2.pk]), nl_params_(nil)
  1 - output([table2.pk], [table2.col_varchar_key], [table2.col_varchar], [table2.col_varchar_20_key], [table2.col_varchar_10_key], [table2.col_varchar_20], [table2.col_int_key], [table2.col_varchar_10], [table2.col_int]), filter(nil), 
      access([table2.pk], [table2.col_varchar_key], [table2.col_varchar], [table2.col_varchar_20_key], [table2.col_varchar_10_key], [table2.col_varchar_20], [table2.col_int_key], [table2.col_varchar_10], [table2.col_int]), partitions(p0)
  2 - output([table1.col_varchar_key], [table1.col_int_key], [table1.col_varchar_20], [table1.col_varchar_20_key], [table1.col_varchar], [table1.pk], [table1.col_varchar_10_key], [table1.col_varchar_10], [table1.col_int]), filter(nil)
  3 - output([table1.col_int_key], [table1.col_int], [table1.col_varchar_key], [table1.col_varchar_20], [table1.col_varchar_20_key], [table1.col_varchar], [table1.pk], [table1.col_varchar_10_key], [table1.col_varchar_10]), filter(nil), 
      access([table1.col_int_key], [table1.col_int], [table1.col_varchar_key], [table1.col_varchar_20], [table1.col_varchar_20_key], [table1.col_varchar], [table1.pk], [table1.col_varchar_10_key], [table1.col_varchar_10]), partitions(p0)

drop table `C`;
drop table `D`;
drop table if exists `a`, `bb`, `cc`;
CREATE TABLE `a` (
`pk` int(11) NOT NULL,
`col_int` int(11) DEFAULT NULL,
`col_varchar_20_key` varchar(20) DEFAULT NULL,
`col_varchar_10` varchar(10) DEFAULT NULL,
`col_varchar` varchar(1) DEFAULT NULL,
`col_varchar_key` varchar(1) DEFAULT NULL,
`col_varchar_20` varchar(20) DEFAULT NULL,
`col_int_key` int(11) DEFAULT NULL,
`col_varchar_10_key` varchar(10) DEFAULT NULL,
PRIMARY KEY (`pk`),
KEY `idx7` (`pk`, `col_varchar_20_key`) BLOCK_SIZE 16384,
KEY `idx3` (`pk`, `col_varchar_key`) BLOCK_SIZE 16384,
KEY `idx1` (`pk`, `col_int_key`) BLOCK_SIZE 16384,
KEY `idx5` (`pk`, `col_varchar_10_key`) BLOCK_SIZE 16384
) ;
CREATE TABLE `bb` (
`col_int_key` int(11) DEFAULT NULL,
`col_varchar_key` varchar(1) DEFAULT NULL,
`col_int` int(11) DEFAULT NULL,
`col_varchar_20` varchar(20) DEFAULT NULL,
`col_varchar_10_key` varchar(10) DEFAULT NULL,
`col_varchar_20_key` varchar(20) DEFAULT NULL,
`pk` int(11) NOT NULL,
`col_varchar` varchar(1) DEFAULT NULL,
`col_varchar_10` varchar(10) DEFAULT NULL,
PRIMARY KEY (`pk`),
KEY `idx1` (`pk`, `col_int_key`) BLOCK_SIZE 16384,
KEY `idx3` (`pk`, `col_varchar_key`) BLOCK_SIZE 16384,
KEY `idx5` (`pk`, `col_varchar_10_key`) BLOCK_SIZE 16384,
KEY `idx7` (`pk`, `col_varchar_20_key`) BLOCK_SIZE 16384
) ;
CREATE TABLE `cc` (
`col_varchar_20` varchar(20) DEFAULT NULL,
`col_int_key` int(11) DEFAULT NULL,
`col_varchar_key` varchar(1) DEFAULT NULL,
`col_varchar_10` varchar(10) DEFAULT NULL,
`pk` int(11) NOT NULL,
`col_varchar_20_key` varchar(20) DEFAULT NULL,
`col_varchar_10_key` varchar(10) DEFAULT NULL,
`col_int` int(11) DEFAULT NULL,
`col_varchar` varchar(1) DEFAULT NULL,
PRIMARY KEY (`pk`),
KEY `idx1` (`pk`, `col_int_key`) BLOCK_SIZE 16384,
KEY `idx3` (`pk`, `col_varchar_key`) BLOCK_SIZE 16384,
KEY `idx7` (`pk`, `col_varchar_20_key`) BLOCK_SIZE 16384,
KEY `idx5` (`pk`, `col_varchar_10_key`) BLOCK_SIZE 16384
) ;
explain basic SELECT /*+use_nl(table1, table2, table3)*/ table1 . `col_int` AS field1,
table2 . col_int_key AS field2,
table1 . col_varchar_10_key AS field3,
table1 . `col_varchar` AS field4,
table2 . col_varchar_20_key AS field5
FROM (BB AS table1
LEFT  JOIN ((CC table2
LEFT JOIN A table3 ON (table3.pk=table2.pk))) ON (table3.pk=table2.pk));
Query Plan
============================================
|ID|OPERATOR                        |NAME  |
--------------------------------------------
|0 |NESTED-LOOP OUTER JOIN CARTESIAN|      |
|1 | TABLE SCAN                     |table1|
|2 | MATERIAL                       |      |
|3 |  NESTED-LOOP JOIN              |      |
|4 |   TABLE SCAN                   |table2|
|5 |   TABLE GET                    |table3|
============================================

Outputs & filters: 
-------------------------------------
  0 - output([table1.col_int], [table2.col_int_key], [table1.col_varchar_10_key], [table1.col_varchar], [table2.col_varchar_20_key]), filter(nil), 
      conds(nil), nl_params_(nil)
  1 - output([table1.col_int], [table1.col_varchar_10_key], [table1.col_varchar]), filter(nil), 
      access([table1.col_int], [table1.col_varchar_10_key], [table1.col_varchar]), partitions(p0)
  2 - output([table2.col_int_key], [table2.col_varchar_20_key]), filter(nil)
  3 - output([table2.col_int_key], [table2.col_varchar_20_key]), filter(nil), 
      conds(nil), nl_params_([table2.pk])
  4 - output([table2.pk], [table2.col_int_key], [table2.col_varchar_20_key]), filter(nil), 
      access([table2.pk], [table2.col_int_key], [table2.col_varchar_20_key]), partitions(p0)
  5 - output([1]), filter(nil), 
      access([table3.pk]), partitions(p0)

SELECT /*+use_nl(table1, table2, table3)*/ table1 . `col_int` AS field1,
table2 . col_int_key AS field2,
table1 . col_varchar_10_key AS field3,
table1 . `col_varchar` AS field4,
table2 . col_varchar_20_key AS field5
FROM (BB AS table1
LEFT  JOIN ((CC table2
LEFT JOIN A table3 ON (table3.pk=table2.pk))) ON (table3.pk=table2.pk));
field1	field2	field3	field4	field5
3	NULL	d	c	NULL
9	NULL	a	NULL	NULL
NULL	NULL	j	z	NULL
5	NULL	w	NULL	NULL
9	NULL	NULL	g	NULL
0	NULL	o	u	NULL
4	NULL	w	NULL	NULL
5	NULL	v	j	NULL
9	NULL	n	i	NULL
NULL	NULL	x	u	NULL
NULL	NULL	NULL	NULL	NULL
NULL	NULL	NULL	NULL	NULL
8	NULL	x	e	NULL
9	NULL	b	s	NULL
3	NULL	k	t	NULL
7	NULL	j	t	NULL
8	NULL	v	b	NULL
0	NULL	m	l	NULL
8	NULL	f	e	NULL
6	NULL	k	NULL	NULL
NULL	NULL	h	w	NULL
9	NULL	m	d	NULL
3	NULL	NULL	NULL	NULL
NULL	NULL	l	h	NULL
8	NULL	j	i	NULL
4	NULL	h	m	NULL
1	NULL	o	d	NULL
4	NULL	d	q	NULL
