--disable_query_log
set @@session.explicit_defaults_for_timestamp=off;
--enable_query_log
# tags: optimizer, join
# description:
#
## Initialization
--disable_warnings
drop table if exists t1,t2,t3;
--enable_warnings
#
##
## Test different join syntaxes
#
--sorted_result
CREATE TABLE t1 (S1 INT primary key, S2 int);
CREATE TABLE t2 (S1 INT primary key, S2 int);
INSERT INTO t1(S1) VALUES (1);
INSERT INTO t2(S1) VALUES (2);
SELECT * FROM t1,t2 where t1.S1 = t2.S1;
SELECT * FROM t1 INNER JOIN t2 on t1.S1=t2.S1;
SELECT * from t1 JOIN t2 on t1.S1 = t2.S1;
SELECT * from t1 CROSS JOIN t2 on t1.S1=t2.S1;
SELECT * from t1 LEFT JOIN t2 on t1.S1=t2.S1;
#SELECT * from t1 LEFT JOIN t2 ON(t2.S1=2);
SELECT * from t1 RIGHT JOIN t2 on t1.S1=t2.S1;
#SELECT * from t1 RIGHT JOIN t2 ON(t1.S1=1);
drop table t1,t2;

#
##
## This failed for lia Perminov
##
#
create table t1 (id int primary key, i2 int);
create table t2 (id int primary key, i2 int);
insert into t1(id) values (75);
insert into t1(id) values (79);
insert into t1(id) values (78);
insert into t1(id) values (77);
#replace into t1 values (76);
#replace into t1 values (76);
insert into t1(id) values (104);
insert into t1(id) values (103);
insert into t1(id) values (102);
insert into t1(id) values (101);
insert into t1(id) values (105);
insert into t1(id) values (106);
insert into t1(id) values (107);
#
insert into t2(id) values (107),(75),(1000);
#
--sorted_result
select t1.id, t2.id from t1, t2 where t2.id = t1.id;
select t1.id, count(t2.id) from t1,t2 where t2.id = t1.id group by t1.id order by t1.id;
select t1.id, count(t2.id) from t1,t2 where t2.id = t1.id group by t2.id order by t2.id;
--sorted_result
select distinct t1.id from t1 join t1 as t_alias;
#
##
## Test problems with impossible ON or WHERE
##
#select t1.id,t2.id from t2 left join t1 on t1.id>=74 and t1.id<=0 where t2.id=75 and t1.id is null;
--replace_regex /Plan signature: [0-9]*/Plan signature/
--disable_result_log
#explain basic select t1.id,t2.id from t2 left join t1 on t1.id>=74 and t1.id<=0 where t2.id=75 and t1.id is null;
--enable_result_log
--replace_regex /Plan signature: [0-9]*/Plan signature/
--disable_result_log
#explain basic select t1.id, t2.id from t1, t2 where t2.id = t1.id and t1.id <0 and t1.id > 0;
--enable_result_log
drop table t1,t2;


#
##
## Simple join test. This failed in 3.23.42, there should have been
## no matches, still three matches were found.
##
#
CREATE TABLE t1 (
  a int NOT NULL,
  b int NOT NULL,
  c int,
  PRIMARY KEY  (a,b)
) ;
#
INSERT INTO t1(a,b) VALUES (1,1),(1,2),(1,3),(1,4),(1,5),(1,6),(1,7),(2,3);
#
CREATE TABLE t2 (
  a int primary key,
  d int
) ;
INSERT INTO t2(a) VALUES (2),(3);

SELECT t1.a,t2.a,b FROM t1,t2 WHERE t1.a=t2.a AND (t1.a=1 OR t1.a=2) AND b>=1 AND b<=3;
SELECT t1.a,t2.a,b FROM t1,t2 WHERE t1.a=t2.a ;
DROP TABLE t1, t2;
#
##
## TEST LEFT JOIN with DATETIME columns
##
#
CREATE TABLE t1 (d DATETIME primary key, d2 DATETIME);
CREATE TABLE t2 (d DATETIME primary key, d2 DATETIME);
INSERT INTO t1 (d) VALUES ('2001-08-01'),('1970-01-01');
#SELECT * FROM t1 LEFT JOIN t2 USING (d) WHERE t2.d IS NULL;
#SELECT * FROM t1 LEFT JOIN t2 USING (d) WHERE d IS NULL;
SELECT * from t1 WHERE t1.d IS NULL;
SELECT * FROM t1 WHERE 1/0 IS NULL;
DROP TABLE t1,t2;
#
##
## Problem with reference from const tables
##
CREATE TABLE t1 (
  Document_ID varchar(50) NOT NULL ,
  Contractor_ID varchar(6) NOT NULL ,
  Language_ID char(3) NOT NULL ,
  Expiration_Date datetime ,
  Publishing_Date datetime ,
  Title varchar(256),
  Column_ID varchar(50) NOT NULL ,
  PRIMARY KEY  (Language_ID,Document_ID,Contractor_ID)
);
#
INSERT INTO t1 VALUES ('xep80','1','ger','2001-12-31 20:00:00','2001-11-12 10:58:00','Kartenbestellung - jetzt auch online','anle'),('','999998','',NULL,NULL,NULL,'');
#
CREATE TABLE t2 (
  Contractor_ID char(6) NOT NULL ,
  Language_ID char(3) NOT NULL default '',
  Document_ID char(50) NOT NULL default '',
  CanRead char(1) default NULL,
  Customer_ID int NOT NULL default '0',
  PRIMARY KEY  (Contractor_ID,Language_ID,Document_ID,Customer_ID)
);
#
INSERT INTO t2 VALUES ('5','ger','xep80','1',999999),('1','ger','xep80','1',999999);
CREATE TABLE t3 (
  Language_ID char(3) NOT NULL default '',
  Column_ID char(50) NOT NULL default '',
  Contractor_ID char(6) NOT NULL default '',
  CanRead char(1) default NULL,
  Active char(1) default NULL,
  PRIMARY KEY  (Language_ID,Column_ID,Contractor_ID)
);
INSERT INTO t3 VALUES ('ger','home','1','1','1'),('ger','Test','1','0','0'),('ger','derclu','1','0','0'),('ger','clubne','1','0','0'),('ger','philos','1','0','0'),('ger','clubko','1','0','0'),('ger','clubim','1','1','1'),('ger','progra','1','0','0'),('ger','progvo','1','0','0'),('ger','progsp','1','0','0'),('ger','progau','1','0','0'),('ger','progku','1','0','0'),('ger','progss','1','0','0'),('ger','nachl','1','0','0'),('ger','mitgli','1','0','0'),('ger','mitsu','1','0','0'),('ger','mitbus','1','0','0'),('ger','ergmar','1','1','1'),('ger','home','4','1','1'),('ger','derclu','4','1','1'),('ger','clubne','4','0','0'),('ger','philos','4','1','1'),('ger','clubko','4','1','1'),('ger','clubim','4','1','1'),('ger','progra','4','1','1'),('ger','progvo','4','1','1'),('ger','progsp','4','1','1'),('ger','progau','4','0','0'),('ger','progku','4','1','1'),('ger','progss','4','1','1'),('ger','nachl','4','1','1'),('ger','mitgli','4','0','0'),('ger','mitsu','4','0','0'),('ger','mitbus','4','0','0'),('ger','ergmar','4','1','1'),('ger','progra2','1','0','0'),('ger','archiv','4','1','1'),('ger','anmeld','4','1','1'),('ger','thema','4','1','1'),('ger','edito','4','1','1'),('ger','madis','4','1','1'),('ger','enma','4','1','1'),('ger','madis','1','1','1'),('ger','enma','1','1','1'),('ger','vorsch','4','0','0'),('ger','veranst','4','0','0'),('ger','anle','4','1','1'),('ger','redak','4','1','1'),('ger','nele','4','1','1'),('ger','aukt','4','1','1'),('ger','callcenter','4','1','1'),('ger','anle','1','0','0');
#delete from t1 where Contractor_ID='999998';
#insert into t1 (Contractor_ID) Values ('999998');
SELECT DISTINCT COUNT(t1.Title) FROM t1,
t2, t3 WHERE
t1.Document_ID='xep80' AND t1.Contractor_ID='1' AND
t1.Language_ID='ger' AND '2001-12-21 23:14:24' >=
Publishing_Date AND '2001-12-21 23:14:24' <= Expiration_Date AND
t1.Document_ID = t2.Document_ID AND
t1.Language_ID = t2.Language_ID AND
t1.Contractor_ID = t2.Contractor_ID AND (
t2.Customer_ID = '4'  OR
t2.Customer_ID = '999999'  OR
t2.Customer_ID = '1' )AND t2.CanRead
= '1'  AND t1.Column_ID=t3.Column_ID AND
t1.Language_ID=t3.Language_ID AND (
t3.Contractor_ID = '4'  OR
t3.Contractor_ID = '999999'  OR
t3.Contractor_ID = '1') AND
t3.CanRead='1' AND t3.Active='1';
SELECT DISTINCT COUNT(t1.Title) FROM t1,
t2, t3 WHERE
t1.Document_ID='xep80' AND t1.Contractor_ID='1' AND
t1.Language_ID='ger' AND '2001-12-21 23:14:24' >=
Publishing_Date AND '2001-12-21 23:14:24' <= Expiration_Date AND
t1.Document_ID = t2.Document_ID AND
t1.Language_ID = t2.Language_ID AND
t1.Contractor_ID = t2.Contractor_ID AND (
t2.Customer_ID = '4'  OR
t2.Customer_ID = '999999'  OR
t2.Customer_ID = '1' )AND t2.CanRead
= '1'  AND t1.Column_ID=t3.Column_ID AND
t1.Language_ID=t3.Language_ID AND (
t3.Contractor_ID = '4'  OR
t3.Contractor_ID = '999999'  OR
t3.Contractor_ID = '1') AND
t3.CanRead='1' AND t3.Active='1';

drop table t1,t2,t3;
#
##
#
CREATE TABLE t1 (
  t1_id int,
  t2_id int default NULL,
  type varchar(20),
  cost_unit varchar(20),
  min_value double default NULL,
  max_value double default NULL,
  t3_id int default NULL,
  item_id int default NULL,
  primary key(t1_id)
);
INSERT INTO t1 VALUES (12,5,'Percent','Cost',-1,0,-1,-1),(14,4,'Percent','Cost',-1,0,-1,-1),(18,5,'Percent','Cost',-1,0,-1,-1),(19,4,'Percent','Cost',-1,0,-1,-1),(20,5,'Percent','Cost',100,-1,22,291),(21,5,'Percent','Cost',100,-1,18,291),(22,1,'Percent','Cost',100,-1,6,291),(23,1,'Percent','Cost',100,-1,21,291),(24,1,'Percent','Cost',100,-1,9,291),(25,1,'Percent','Cost',100,-1,4,291),(26,1,'Percent','Cost',100,-1,20,291),(27,4,'Percent','Cost',100,-1,7,202),(28,1,'Percent','Cost',50,-1,-1,137),(29,2,'Percent','Cost',100,-1,4,354),(30,2,'Percent','Cost',100,-1,9,137),(93,2,'Cost','Cost',-1,10000000,-1,-1);
CREATE TABLE t2 (
  id int,
  name varchar(255) default NULL,
  PRIMARY KEY  (id)
);
INSERT INTO t2 VALUES (1,'s1'),(2,'s2'),(3,'s3'),(4,'s4'),(5,'s5');
--sorted_result
select/*+USE_MERGE(t1,t2)*/ t1.*, t2.*  from t1, t2 where t2.id=t1.t2_id limit 2;
--sorted_result
select * from t1,t1 a;
--sorted_result
select * from t1,t2 b;
drop table t1,t2;
#
#
#CREATE TABLE t1 (
#  siteid varchar(25) NOT NULL default '',
#  emp_id varchar(30) NOT NULL default '',
#  rate_code varchar(10) default NULL,
#  UNIQUE KEY site_emp (siteid,emp_id),
#  KEY siteid (siteid)
#) ENGINE=MyISAM;
#INSERT INTO t1 VALUES ('rivercats','psmith','cust'), ('rivercats','KWalker','cust');
#CREATE TABLE t2 (
#  siteid varchar(25) NOT NULL default '',
#  rate_code varchar(10) NOT NULL default '',
#  base_rate float NOT NULL default '0',
#  PRIMARY KEY  (siteid,rate_code),
#  FULLTEXT KEY rate_code (rate_code)
#) ENGINE=MyISAM;
#INSERT INTO t2 VALUES ('rivercats','cust',20);
#SELECT emp.rate_code, lr.base_rate FROM t1 AS emp LEFT JOIN t2 AS lr USING (siteid, rate_code) WHERE emp.emp_id = 'psmith' AND lr.siteid = 'rivercats';
#SELECT emp.rate_code, lr.base_rate FROM t1 AS emp LEFT JOIN t2 AS lr USING (siteid, rate_code) WHERE lr.siteid = 'rivercats' AND emp.emp_id = 'psmith';
#SELECT rate_code, lr.base_rate FROM t1 AS emp LEFT JOIN t2 AS lr USING (siteid, rate_code) WHERE emp.emp_id = 'psmith' AND siteid = 'rivercats';
#SELECT rate_code, lr.base_rate FROM t1 AS emp LEFT JOIN t2 AS lr USING (siteid, rate_code) WHERE siteid = 'rivercats' AND emp.emp_id = 'psmith';
#drop table t1,t2;
#
##
## Problem with internal list handling when reducing WHERE
##
#
CREATE TABLE t1 (ID INTEGER NOT NULL PRIMARY KEY, Value1 VARCHAR(255));
CREATE TABLE t2 (ID INTEGER NOT NULL PRIMARY KEY, Value2 VARCHAR(255));
INSERT INTO t1 VALUES (1, 'A');
INSERT INTO t2 VALUES (1, 'B');
#
#SELECT * FROM t1 NATURAL JOIN t2 WHERE 1 AND (Value1 = 'A' AND Value2 <> 'B');
#SELECT * FROM t1 NATURAL JOIN t2 WHERE 1 AND Value1 = 'A' AND Value2 <> 'B';
#SELECT * FROM t1 NATURAL JOIN t2 WHERE (Value1 = 'A' AND Value2 <> 'B') AND 1;
drop table t1,t2;
#
##
#
#CREATE TABLE t1 (a int);
#CREATE TABLE t2 (b int);
#CREATE TABLE t3 (c int);
#SELECT * FROM t1 NATURAL JOIN t2 NATURAL JOIN t3;
#DROP TABLE t1, t2, t3;
#
##
## Test combination of join methods
##
#
create table t1 (i int primary key,j int);
create table t2 (i int primary key,j int);
create table t3 (i int primary key,j int);
insert into t1(i) values(1),(2);
insert into t2(i) values(2),(3);
insert into t3(i) values (2),(4);
#
#select * from t1 natural left join t2;
--sorted_result
select * from t1 left join t2 on (t1.i=t2.i);
#select * from t1 natural left join t2 natural left join t3;
--sorted_result
select * from t1 left join t2 on (t1.i=t2.i) left join t3 on (t2.i=t3.i);
#
#select * from t3 natural right join t2;
--sorted_result
select * from t3 right join t2 on (t3.i=t2.i);
#select * from t3 natural right join t2 natural right join t1;
--sorted_result
select * from t3 right join t2 on (t3.i=t2.i) right join t1 on (t2.i=t1.i);
#
#select * from t1,t2 natural left join t3 order by t1.i,t2.i,t3.i;
#select * from t1,t2 left join t3 on (t2.i=t3.i) order by t1.i,t2.i,t3.i;
#select t1.i,t2.i,t3.i from t2 natural left join t3,t1 order by t1.i,t2.i,t3.i;
#select t1.i,t2.i,t3.i from t2 left join t3 on (t2.i=t3.i),t1 order by t1.i,t2.i,t3.i;
#
#select * from t1,t2 natural right join t3 order by t1.i,t2.i,t3.i;
#select * from t1,t2 right join t3 on (t2.i=t3.i) order by t1.i,t2.i,t3.i;
#select t1.i,t2.i,t3.i from t2 natural right join t3,t1 order by t1.i,t2.i,t3.i;
#select t1.i,t2.i,t3.i from t2 right join t3 on (t2.i=t3.i),t1 order by t1.i,t2.i,t3.i;
drop table t1,t2,t3;
#
##
#CREATE TABLE t1 (a int, b int default 0, c int default 1);
#
#INSERT INTO t1 (a) VALUES (1),(2),(3),(4),(5),(6),(7),(8);
#INSERT INTO t1 (a) SELECT a + 8 FROM t1;
#INSERT INTO t1 (a) SELECT a + 16 FROM t1;
#
#CREATE TABLE t2 (a int, d int, e int default 0);
#
#INSERT INTO t2 (a, d) VALUES (1,1),(2,2),(3,3),(4,4);
#INSERT INTO t2 (a, d) SELECT a+4, a+4 FROM t2;
#INSERT INTO t2 (a, d) SELECT a+8, a+8 FROM t2;
#
## should use join cache
--disable_result_log
#EXPLAIN
--enable_result_log
#SELECT STRAIGHT_JOIN t2.e FROM t1,t2 WHERE t2.d=1 AND t1.b=t2.e
#  ORDER BY t1.b, t1.c;
#SELECT STRAIGHT_JOIN t2.e FROM t1,t2 WHERE t2.d=1 AND t1.b=t2.e
#  ORDER BY t1.b, t1.c;
#
#DROP TABLE t1,t2;
#
## End of 4.1 tests
#
##
##  Tests for WL#2486 Natural/using join according to SQL:2003.
##
##  NOTICE:
##  - The tests are designed so that all statements, except MySQL
##    extensions run on any SQL server. Please do no change.
##  - Tests marked with TODO will be submitted as bugs.
##
#
#create table t1 (c int, b int);
#create table t2 (a int, b int);
#create table t3 (b int, c int);
#create table t4 (y int, c int);
#create table t5 (y int, z int);
#create table t6 (a int, c int);
#
#insert into t1 values (10,1);
#insert into t1 values (3 ,1);
#insert into t1 values (3 ,2);
#insert into t2 values (2, 1);
#insert into t3 values (1, 3);
#insert into t3 values (1,10);
#insert into t4 values (11,3);
#insert into t4 values (2, 3);
#insert into t5 values (11,4);
#insert into t6 values (2, 3);
#
## Views with simple natural join.
#create algorithm=merge view v1a as
#select * from t1 natural join t2;
## as above, but column names are cross-renamed: a->c, c->b, b->a
#create algorithm=merge view v1b(a,b,c) as
#select * from t1 natural join t2;
## as above, but column names are aliased: a->c, c->b, b->a
#create algorithm=merge view v1c as
#select b as a, c as b, a as c from t1 natural join t2;
##  as above, but column names are cross-renamed, and aliased
##  a->c->b, c->b->a, b->a->c
#create algorithm=merge view v1d(b, a, c) as
#select a as c, c as b, b as a from t1 natural join t2;
#
## Views with JOIN ... ON
#create algorithm=merge view v2a as
#select t1.c, t1.b, t2.a from t1 join (t2 join t4 on b + 1 = y) on t1.c = t4.c;
#create algorithm=merge view v2b as
#select t1.c as b, t1.b as a, t2.a as c
#from t1 join (t2 join t4 on b + 1 = y) on t1.c = t4.c;
#
## Views with bigger natural join
#create algorithm=merge view v3a as
#select * from t1 natural join t2 natural join t3;
#create algorithm=merge view v3b as
#select * from t1 natural join (t2 natural join t3);
#
## View over views with mixed natural join and join ... on
#create algorithm=merge view v4 as
#select * from v2a natural join v3a;
#
## Nested natural/using joins.
#select * from (t1 natural join t2) natural join (t3 natural join t4);
#select * from (t1 natural join t2) natural left join (t3 natural join t4);
#select * from (t3 natural join t4) natural right join (t1 natural join t2);
#select * from (t1 natural left join t2) natural left join (t3 natural left join t4);
#select * from (t4 natural right join t3) natural right join (t2 natural right join t1);
#select * from t1 natural join t2 natural join t3 natural join t4;
#select * from ((t1 natural join t2) natural join t3) natural join t4;
#select * from t1 natural join (t2 natural join (t3 natural join t4));
## select * from ((t3 natural join (t1 natural join t2)) natural join t4) natural join t5;
## select * from ((t3 natural left join (t1 natural left join t2)) natural left join t4) natural left join t5;
#select * from t5 natural right join (t4 natural right join ((t2 natural right join t1) natural right join t3));
#select * from (t1 natural join t2), (t3 natural join t4);
## MySQL extension - nested comma ',' operator instead of cross join.
#select * from t5 natural join ((t1 natural join t2), (t3 natural join t4));
#select * from  ((t1 natural join t2),  (t3 natural join t4)) natural join t5;
#select * from t5 natural join ((t1 natural join t2) cross join (t3 natural join t4));
#select * from  ((t1 natural join t2) cross join (t3 natural join t4)) natural join t5;
#
#select * from (t1 join t2 using (b)) join (t3 join t4 using (c)) using (c);
#select * from (t1 join t2 using (b)) natural join (t3 join t4 using (c));
#
#
## Other clauses refer to NJ columns.
#select a,b,c from (t1 natural join t2) natural join (t3 natural join t4)
#where b + 1 = y or b + 10 = y group by b,c,a having min(b) < max(y) order by a;
#select * from (t1 natural join t2) natural left join (t3 natural join t4)
#where b + 1 = y or b + 10 = y group by b,c,a,y having min(b) < max(y) order by a, y;
#select * from (t3 natural join t4) natural right join (t1 natural join t2)
#where b + 1 = y or b + 10 = y group by b,c,a,y having min(b) < max(y) order by a, y;
#
## Qualified column references to NJ columns.
#select * from t1 natural join t2 where t1.c > t2.a;
#select * from t1 natural join t2 where t1.b > t2.b;
#select * from t1 natural left join (t4 natural join t5) where t5.z is not NULL;
#
## Nested 'join ... on' - name resolution of ON conditions
#select * from t1 join (t2 join t4 on b + 1 = y) on t1.c = t4.c;
#select * from (t2 join t4 on b + 1 = y) join t1 on t1.c = t4.c;
#select * from t1 natural join (t2 join t4 on b + 1 = y);
#select * from (t1 cross join t2) join (t3 cross join t4) on (a < y and t2.b < t3.c);
#
## MySQL extension - 'join ... on' over nested comma operator
#select * from (t1, t2) join (t3, t4) on (a < y and t2.b < t3.c);
#select * from (t1 natural join t2) join (t3 natural join t4) on a = y;
#select * from ((t3 join (t1 join t2 on c > a) on t3.b < t2.a) join t4 on y > t1.c) join t5 on z = t1.b + 3;
#
## MySQL extension - refererence qualified coalesced columns
#select * from t1 natural join t2 where t1.b > 0;
#select * from t1 natural join (t4 natural join t5) where t4.y > 7;
#select * from (t4 natural join t5) natural join t1 where t4.y > 7;
#select * from t1 natural left join (t4 natural join t5) where t4.y > 7;
#select * from (t4 natural join t5) natural right join t1 where t4.y > 7;
#select * from (t1 natural join t2) join (t3 natural join t4) on t1.b = t3.b;
#
## MySQL extension - select qualified columns of NJ columns
#select t1.*, t2.* from t1 natural join t2;
#select t1.*, t2.*, t3.*, t4.* from (t1 natural join t2) natural join (t3 natural join t4);
#
## Queries over subselects in the FROM clause
#select * from (select * from t1 natural join t2) as t12
#              natural join
#              (select * from t3 natural join t4) as t34;
#select * from (select * from t1 natural join t2) as t12
#              natural left join
#              (select * from t3 natural join t4) as t34;
#select * from (select * from t3 natural join t4) as t34
#              natural right join
#              (select * from t1 natural join t2) as t12;
#
## Queries over views
#select * from v1a;
#select * from v1b;
#select * from v1c;
#select * from v1d;
#select * from v2a;
#select * from v2b;
#select * from v3a;
#select * from v3b;
#select * from v4;
#select * from v1a natural join v2a;
#select v2a.* from v1a natural join v2a;
#select * from v1b join v2a on v1b.b = v2a.c;
#select * from v1c join v2a on v1c.b = v2a.c;
#select * from v1d join v2a on v1d.a = v2a.c;
#select * from v1a join (t3 natural join t4) on a = y;
#
## TODO: add tests with correlated subqueries for natural join/join on.
#
#
##--------------------------------------------------------------------
## Negative tests (tests for errors)
##--------------------------------------------------------------------
## works in Oracle - bug
#-- error 1052
#select * from t1 natural join (t3 cross join t4);
## works in Oracle - bug
#-- error 1052
#select * from (t3 cross join t4) natural join t1;
#-- error 1052
#select * from t1 join (t2, t3) using (b);
#-- error 1052
#select * from ((t1 natural join t2), (t3 natural join t4)) natural join t6;
#-- error 1052
#select * from ((t1 natural join t2), (t3 natural join t4)) natural join t6;
#-- error 1052
#select * from t6 natural join ((t1 natural join t2),  (t3 natural join t4));
#-- error 1052
#select * from (t1 join t2 on t1.b=t2.b) natural join (t3 natural join t4);
#-- error 1052
#select * from  (t3 natural join t4) natural join (t1 join t2 on t1.b=t2.b);
## this one is OK, the next equivalent one is incorrect (bug in Oracle)
#-- error 1052
#select * from (t3 join (t4 natural join t5) on (b < z))
#              natural join
#              (t1 natural join t2);
#-- error 1052
#select * from (t1 natural join t2) natural join (t3 join (t4 natural join t5) on (b < z));
#
#-- error 1054
#select t1.b from v1a;
#-- error 1054
#select * from v1a join v1b on t1.b = t2.b;
#
##
##
## Omit columns.PRIVILIGES as it may vary with embedded server.
## Omit columns.ORDINAL_POSITION and statistics.CARDINALITY as it may vary with hostname='localhost'.
#select
# statistics.TABLE_NAME, statistics.COLUMN_NAME, statistics.TABLE_CATALOG, statistics.TABLE_SCHEMA, statistics.NON_UNIQUE, statistics.INDEX_SCHEMA, statistics.INDEX_NAME, statistics.SEQ_IN_INDEX, statistics.COLLATION, statistics.SUB_PART, statistics.PACKED, statistics.NULLABLE, statistics.INDEX_TYPE, statistics.COMMENT,
# columns.TABLE_CATALOG, columns.TABLE_SCHEMA, columns.COLUMN_DEFAULT, columns.IS_NULLABLE, columns.DATA_TYPE, columns.CHARACTER_MAXIMUM_LENGTH, columns.CHARACTER_OCTET_LENGTH, columns.NUMERIC_PRECISION, columns.NUMERIC_SCALE, columns.CHARACTER_SET_NAME, columns.COLLATION_NAME, columns.COLUMN_TYPE, columns.COLUMN_KEY, columns.EXTRA, columns.COLUMN_COMMENT
# from information_schema.statistics join information_schema.columns using(table_name,column_name) where table_name='user';
#
#drop table t1;
#drop table t2;
#drop table t3;
#drop table t4;
#drop table t5;
#drop table t6;
#
#drop view v1a;
#drop view v1b;
#drop view v1c;
#drop view v1d;
#drop view v2a;
#drop view v2b;
#drop view v3a;
#drop view v3b;
#drop view v4;
#
##
## materialized
##
#create table t1 (a1 int, a2 int);
#create table t2 (a1 int, b int);
#create table t3 (c1 int, c2 int);
#create table t4 (c2 int);
#
#insert into t1 values (1,1);
#insert into t2 values (1,1);
#insert into t3 values (1,1);
#insert into t4 values (1);
#
#select * from t1 join t2 using (a1) join t3 on b=c1 join t4 using (c2);
#select * from t3 join (t1 join t2 using (a1)) on b=c1 join t4 using (c2);
#select a2 from t1 join t2 using (a1) join t3 on b=c1 join t4 using (c2);
#select a2 from t3 join (t1 join t2 using (a1)) on b=c1 join t4 using (c2);
#select a2 from ((t1 join t2 using (a1)) join t3 on b=c1) join t4 using (c2);
#select a2 from ((t1 natural join t2) join t3 on b=c1) natural join t4;
#
#drop table t1,t2,t3,t4;
#
##
##
#create table t1 (c int, b int);
#create table t2 (a int, b int);
#create table t3 (b int, c int);
#create table t4 (y int, c int);
#create table t5 (y int, z int);
#
#insert into t1 values (3,2);
#insert into t2 values (1,2);
#insert into t3 values (2,3);
#insert into t4 values (1,3);
#insert into t5 values (1,4);
#
## this fails
#prepare stmt1 from 'select * from ((t3 natural join (t1 natural join t2))
#natural join t4) natural join t5';
#execute stmt1;
#
## this works
#select * from ((t3 natural join (t1 natural join t2)) natural join t4)
#  natural join t5;
#drop table t1, t2, t3, t4, t5;
#
## End of tests for WL#2486 - natural/using join
#
##
##            aliases ignored
##
#CREATE TABLE t1 (ID INTEGER, Name VARCHAR(50));
#CREATE TABLE t2 (Test_ID INTEGER);
#CREATE VIEW v1 (Test_ID, Description) AS SELECT ID, Name FROM t1;
#
#CREATE TABLE tv1 SELECT Description AS Name FROM v1 JOIN t2
# USING (Test_ID);
#DESCRIBE tv1;
#CREATE TABLE tv2 SELECT Description AS Name FROM v1 JOIN t2
# ON v1.Test_ID = t2.Test_ID;
#DESCRIBE tv2;
#
#DROP VIEW v1;
#DROP TABLE t1,t2,tv1,tv2;
#
#
#create table t1 (a int, b int);
#insert into t1 values
#  (NULL, 1),
#  (NULL, 2),
#  (NULL, 3),
#  (NULL, 4);
#
#create table t2 (a int not null, primary key(a));
#insert into t2 values (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
#
#create table t3 (a int not null, primary key(a));
#insert into t3 values (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
#
#flush status;
#select * from t1, t2, t3 where t3.a=t1.a and t2.a=t1.b;
--replace_regex /Plan signature: [0-9]*/Plan signature/
--disable_result_log
#explain basic select * from t1, t2, t3 where t3.a=t1.a and t2.a=t1.b;
--enable_result_log
#--echo We expect rnd_next=5, and read_key must be 0 because of short-cutting:
#show status like 'Handler_read%';
#drop table t1, t2, t3;
#
##
##
#create table t1 (a int);
#insert into t1 values (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
#
#create table t2 (a int, b int, filler char(100), key(a), key(b));
#create table t3 (a int, b int, filler char(100), key(a), key(b));
#
#insert into t2
#  select @a:= A.a + 10*(B.a + 10*C.a), @a, 'filler' from t1 A, t1 B, t1 C;
#insert into t3 select * from t2 where a < 800;
#
## The order of tables must be t2,t3:
--replace_regex /Plan signature: [0-9]*/Plan signature/
--disable_result_log
#explain basic select * from t2,t3 where t2.a < 200 and t2.b=t3.b;
--enable_result_log
#
#drop table t1, t2, t3;
#
## prev_record_reads() function }
#create table t1 (a int);
#insert into t1 values (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
#
#create table t2 (a int, b int, primary key(a));
#insert into t2 select @v:=A.a+10*B.a, @v  from t1 A, t1 B;
#
--replace_regex /Plan signature: [0-9]*/Plan signature/
--disable_result_log
#explain basic select * from t1;
--enable_result_log
#show status like '%cost%';
#select 'The cost of accessing t1 (dont care if it changes' '^';
#
#select 'vv: Following query must use ALL(t1), eq_ref(A), eq_ref(B): vv' Z;
#
--replace_regex /Plan signature: [0-9]*/Plan signature/
--disable_result_log
#explain basic select * from t1, t2 A, t2 B where A.a = t1.a and B.a=A.b;
--enable_result_log
#show status like '%cost%';
#select '^^: The above should be ~= 20 + cost(select * from t1). Value less than 20 is an error' Z;
#
#
#
#drop table t1, t2;
#
##
## done
##
#
#CREATE TABLE t1 (a INT PRIMARY KEY, b INT);
#CREATE TABLE t2 (c INT PRIMARY KEY, d INT);
#
#INSERT INTO t1 VALUES(1,NULL),(2,NULL),(3,NULL),(4,NULL);
#INSERT INTO t1 SELECT a + 4, b FROM t1;
#INSERT INTO t1 SELECT a + 8, b FROM t1;
#INSERT INTO t1 SELECT a + 16, b FROM t1;
#INSERT INTO t1 SELECT a + 32, b FROM t1;
#INSERT INTO t1 SELECT a + 64, b FROM t1;
#INSERT INTO t2 SELECT a, b FROM t1;
#
##expect indexed ORDER BY
--disable_result_log
#EXPLAIN SELECT * FROM t1 JOIN t2 ON b=c ORDER BY a LIMIT 2;
--enable_result_log
--disable_result_log
#EXPLAIN SELECT * FROM t1 JOIN t2 ON a=c ORDER BY a LIMIT 2;
--enable_result_log
#SELECT * FROM t1 JOIN t2 ON b=c ORDER BY a LIMIT 2;
#SELECT * FROM t1 JOIN t2 ON a=c ORDER BY a LIMIT 2;
#
##expect filesort
--disable_result_log
#EXPLAIN SELECT * FROM t1 JOIN t2 ON b=c ORDER BY a;
--enable_result_log
--disable_result_log
#EXPLAIN SELECT * FROM t1 JOIN t2 ON a=c ORDER BY a;
--enable_result_log
#SELECT * FROM t1 JOIN t2 ON b=c ORDER BY a;
#SELECT * FROM t1 JOIN t2 ON a=c ORDER BY a;
#
#DROP TABLE IF EXISTS t1,t2;
#
#
#--echo #
#--echo #
#CREATE TABLE t1 (a INT);
#CREATE TABLE t2 (a INT);
#CREATE TABLE t3 (a INT, INDEX (a));
#CREATE TABLE t4 (a INT);
#CREATE TABLE t5 (a INT);
#CREATE TABLE t6 (a INT);
#
#INSERT INTO t1 VALUES (1), (1), (1);
#
#INSERT INTO t2 VALUES
#(2), (2), (2), (2), (2), (2), (2), (2), (2), (2);
#
#INSERT INTO t3 VALUES
#(3), (3), (3), (3), (3), (3), (3), (3), (3), (3);
#
--disable_result_log
#EXPLAIN
--enable_result_log
#SELECT *
#FROM
#  t1 JOIN t2 ON t1.a = t2.a
#  LEFT JOIN
#  (
#   (
#    t3 LEFT JOIN t4 ON t3.a = t4.a
#   )
#   LEFT JOIN
#   (
#     t5 LEFT JOIN t6 ON t5.a = t6.a
#   )
#   ON t4.a = t5.a
#  )
#  ON t1.a = t3.a;
#
#SELECT *
#FROM
#  t1 JOIN t2 ON t1.a = t2.a
#  LEFT JOIN
#  (
#   (
#    t3 LEFT JOIN t4 ON t3.a = t4.a
#   )
#   LEFT JOIN
#   (
#     t5 LEFT JOIN t6 ON t5.a = t6.a
#   )
#   ON t4.a = t5.a
#  )
#  ON t1.a = t3.a;
#
#DROP TABLE t1,t2,t3,t4,t5,t6;
#
#--echo #
#--echo #
#
#CREATE TABLE t1(f1 INT);
#INSERT INTO t1 VALUES (1),(2);
#CREATE VIEW v1 AS SELECT 1 FROM t1 LEFT JOIN t1 AS t2 on 1=1;
--disable_result_log
#EXPLAIN EXTENDED
--enable_result_log
#SELECT 1 FROM v1 right join v1 AS v2 ON RAND();
#DROP VIEW v1;
#DROP TABLE t1;
#
#--echo #
--replace_regex /Plan signature: [0-9]*/Plan signature/
--disable_result_log
--enable_result_log
#--echo #
#CREATE TABLE t1 (a TINYINT, b TEXT, KEY (a));
#INSERT INTO t1 VALUES (0,''),(0,'');
#FLUSH TABLES;
--disable_result_log
#EXPLAIN SELECT 1 FROM t1 LEFT JOIN t1 a ON 1
--enable_result_log
#WHERE ROW(t1.a, 1111.11) = ROW(1111.11, 1111.11) AND
#ROW(t1.b, 1111.11) <=> ROW('','');
#DROP TABLE t1;
#
#--echo #
#--echo #
#
#CREATE TABLE t1 (a INT NOT NULL, b INT NOT NULL, PRIMARY KEY (a,b));
#INSERT INTO t1 VALUES (0,0), (1,1);
#
#SELECT * FROM t1 STRAIGHT_JOIN t1 t2 ON t1.a=t2.a AND t1.a=t2.b ORDER BY t2.a, t1.a;
#
#DROP TABLE t1;
#
#--echo End of 5.0 tests.
#
#
##
##
#CREATE TABLE t1 (f1 int);
#
#CREATE TABLE t2 (f1 int);
#INSERT INTO t2  VALUES (1);
#CREATE VIEW v1 AS SELECT * FROM t2;
#
#PREPARE stmt FROM 'UPDATE t2 AS A NATURAL JOIN v1 B SET B.f1 = 1';
#EXECUTE stmt;
#EXECUTE stmt;
#
#DEALLOCATE PREPARE stmt;
#
#DROP VIEW v1;
#DROP TABLE t1, t2;
#
##
##
#CREATE TABLE t1(a CHAR(9),b INT,KEY(b),KEY(a)) ENGINE=MYISAM;
#CREATE TABLE t2(a CHAR(9),b INT,KEY(b),KEY(a)) ENGINE=MYISAM;
#INSERT INTO t1 VALUES ('1',null),(null,null);
#INSERT INTO t2 VALUES ('1',null),(null,null);
#CREATE TABLE mm1(a CHAR(9),b INT,KEY(b),KEY(a))
#ENGINE=MERGE  UNION=(t1,t2);
#SELECT t1.a FROM mm1,t1;
#DROP TABLE t1, t2, mm1;
#
##
## The reason is that {1} is not a valid geometric collection.
##
##CREATE TABLE t1 (a INT);
#
##INSERT INTO t1 VALUES (0), (1);
#
##let $i=2;
##while ($i)
##{
##  SELECT MULTIPOINT(
##    1,
##    (
##      SELECT MULTIPOINT(
##        MULTIPOINT(
##          1,
##          (SELECT COUNT(*) FROM (SELECT 1 FROM t1 GROUP BY a,a) d)
##        )
##      ) FROM t1
##    )
##  ) != COUNT(*) q FROM t1 GROUP BY a;
##  dec $i;
##}
##
##DROP TABLE t1;
#
#--echo #
#
#CREATE TABLE t1(a INT, b INT);
#INSERT INTO t1 VALUES (), ();
#
#SELECT 1 FROM t1
#GROUP BY
#GREATEST(t1.a,
#         (SELECT 1 FROM
#          (SELECT t1.b FROM t1,t1 t2
#           ORDER BY t1.a, t1.a LIMIT 1) AS d)
#        );
#
#DROP TABLE t1;
#
#--echo #
#
#CREATE TABLE t1(c INT);
#
#INSERT INTO t1 VALUES (1), (2);
#
#PREPARE stmt FROM 'SELECT t2.c AS f1 FROM t1 LEFT JOIN
#                                        t1 t2 ON t1.c=t2.c RIGHT JOIN
#                                        t1 t3 ON t1.c=t3.c
#                   GROUP BY f1;';
#
#EXECUTE stmt;
#EXECUTE stmt;
#
#DEALLOCATE PREPARE stmt;
#DROP TABLE t1;
#
#--echo End of 5.1 tests
#add cons alias
--disable_warnings
drop table if exists dyr_test,dyr_test_1;
--enable_warnings
create  table dyr_test(c1 int primary key,c2 varchar(10),c3 int);
create  table dyr_test_1(c1 int primary key,c2 varchar(10),c3 int);
insert into dyr_test values(1, 'saf', 2);
insert into dyr_test_1 values(3, 'saf', 4), (1, 'saf', 5);
select '1' as tmp from dyr_test;
select '1' as tmp from dyr_test A inner join dyr_test_1 B on A.c1=B.c1;
--error 1054
select 1 as tmp from dyr_test A,dyr_test_1 B where A.c1=B.c1 and A.c1>tmp and B.c1>tmp;
--error 1054
select t1.c1, t2.c1, 100 const_val from dyr_test t1,dyr_test_1 t2 where t1.c1=t2.c1 and t1.c3<const_val and t2.c3<const_val;
select t1.c1, t2.c1, 100 const_val from dyr_test t1,dyr_test_1 t2 where t1.c1=t2.c1 and t1.c3<100 and t2.c3<100;
--disable_warnings
drop table if exists dyr_test,dyr_test_1;
--enable_warnings
--disable_warnings
drop table if exists t1,t2,t3;
--enable_warnings

--disable_warnings
DROP TABLE IF EXISTS t000, t001;
--enable_warnings

create table t000 (c0 varchar(7) PRIMARY KEY);

create table t001 (c1 binary(4));

INSERT INTO t000 VALUES ('J'), ('K'),('M');

INSERT INTO t001 VALUES ('J'), ('K'),('L'),('N');

select c1,c0 from t000, t001 WHERE c0 <= c1 order by 1,2;

--disable_warnings
DROP TABLE IF EXISTS t000, t001;
--enable_warnings

# distributed plan join
--disable_warnings
drop table if exists t1, t2, t3;
--enable_warnings
create table t1 (pk int primary key, c1 int) partition by hash(pk) partitions 5;
create table t2 (pk int primary key, c1 int);
create table t3 (pk int primary key, c1 int);
insert into t1 values (0, 10);
insert into t1 values (1, 11);
insert into t1 values (2, 12);
insert into t1 values (3, 13);
insert into t1 values (4, 14);
insert into t1 values (5, 15);
insert into t2 values (0, 20), (1, 21);
insert into t3 values (0, 30), (1, 31);
select * from t1 as s1 join t1 as s2 order by s1.pk, s1.c1, s2.pk, s2.c1;
select s1.pk, s1.c1, s4.c1 from t1 as s1 join (select s2.c1 from t2 as s2 join t3 s3) as s4 order by s1.pk, s1.c1, s4.c1;
--disable_warnings
drop table if exists t1, t2, t3;
--enable_warnings

# wise join
--disable_warnings
drop table if exists t1, t2;
--enable_warnings
create table t1 (a int primary key) partition by range columns(a) (partition p_100 values less than (100), partition p_max_value values less than (MAXVALUE));
create table t2 (b int primary key) partition by range columns(b) (partition p_100 values less than (100), partition p_max_value values less than (MAXVALUE));
insert into t1 values (1), (5), (38), (138), (188), (345);
insert into t2 values (1), (9), (38), (67), (128), (188), (369);
select * from t1 as s1 full outer join t2 as s2 on s1.a = s2.b order by s1.a desc, s2.b asc;
select /*+use_nl(s1 s2)*/  * from t1 as s1 full outer join t2 as s2 on s1.a = s2.b order by s1.a desc, s2.b asc;
explain  basic select * from t1 as s1 full outer join t2 as s2 on s1.a = s2.b order by s1.a desc, s2.b asc;
explain  basic select /*+use_nl(s1 s2)*/  * from t1 as s1 full outer join t2 as s2 on s1.a = s2.b order by s1.a desc, s2.b asc;
--disable_warnings
drop table if exists t1, t2;
--enable_warnings
create table t1 (pk int primary key, c1 int) partition by hash(pk) partitions 2;
create table t2 (pk int primary key, c1 int) partition by hash(pk) partitions 2;
insert into t1 values (1, 1), (2, 2), (3, 3);
insert into t2 values (2, 2), (3, 3), (4, 4), (5, 5);
select * from t1 as s1 full outer join t2 as s2 on s1.pk = s2.pk order by s1.pk desc, s2.pk asc;
select /*+use_nl(s1 s2)*/ * from t1 as s1 left outer join t2 as s2 on s1.pk = s2.pk order by s1.pk desc, s2.pk asc;
select * from t1 as s1 left outer join t2 as s2 on s1.pk = s2.pk order by s1.pk desc, s2.pk asc;
select * from t1 as s1 right outer join t2 as s2 on s1.pk = s2.pk order by s1.pk desc, s2.pk asc;
explain  basic select * from t1 as s1 full outer join t2 as s2 on s1.pk = s2.pk order by s1.pk desc, s2.pk asc;
explain  basic select /*+use_nl(s1 s2)*/ * from t1 as s1 left outer join t2 as s2 on s1.pk = s2.pk order by s1.pk desc, s2.pk asc;
explain  basic select * from t1 as s1 left outer join t2 as s2 on s1.pk = s2.pk order by s1.pk desc, s2.pk asc;
explain  basic select * from t1 as s1 right outer join t2 as s2 on s1.pk = s2.pk order by s1.pk desc, s2.pk asc;

--disable_warnings
drop table if exists t1, t2;
--enable_warnings
create table t1 (pk int primary key, c1 int) partition by hash(pk) partitions 2;
create table t2 (pk int primary key, c1 int) partition by hash(pk) partitions 2;
explain  basic select * from t1 as s1 full outer join t2 as s2 on s1.pk = s2.pk order by s1.pk desc;
select * from t1 as s1 full outer join t2 as s2 on s1.pk = s2.pk order by s1.pk desc;

--disable_warnings
drop table if exists t1, t2;
--enable_warnings

--disable_warnings
drop table if exists a, b;
--enable_warnings
create table a(a1 int primary key,a2 int,a3 int);
create table b(b1 int primary key,b2 int,b3 int, KEY idx_b2(b2,b3));
insert into a values(1,1,1),(2,1,2);
insert into b values(1,1,1),(2,1,2);
explain basic select /*+use_merge(a b)*/a1,b2,b3 from a,b where a2=b2 order by b2,b3;
select /*+use_merge(a b)*/a1,b2,b3 from a,b where a2=b2 order by b2,b3;
explain basic select /*+leading(a b), use_merge(a b)*/a1,b2,b3 from a,b where a2=b2 order by b2,b3;
select /*+leading(a b), use_merge(a b)*/a1,b2,b3 from a,b where a2=b2 order by b2,b3;
explain basic select /*+leading(b a), use_merge(a b)*/a1,b2,b3 from a,b where a2=b2 order by b2,b3;
select /*+leading(b a), use_merge(a b)*/a1,b2,b3 from a,b where a2=b2 order by b2,b3;
--disable_warnings
drop table if exists a, b;
--enable_warnings
