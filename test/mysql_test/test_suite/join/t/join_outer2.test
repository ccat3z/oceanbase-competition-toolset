--disable_query_log
set @@session.explicit_defaults_for_timestamp=off;
--enable_query_log

--disable_abort_on_error
--disable_parsing
drop table t1,t2;
create table t1 (a int, b int);
insert into t1 values (1,1),(2,2),(3,3);
create table t2 (a int, b int);
insert into t2 values (1,1), (2,2);

select * from t2 right join t1 on t2.a=t1.a;
select straight_join * from t2 right join t1 on t2.a=t1.a;

DROP TABLE t0,t1,t2,t3;

--enable_parsing
#
# left join mistakingly converted to inner join
#
--disable_warnings
drop table if exists t1,t2;
--enable_warnings
create table t1 (a int PRIMARY KEY, b int);
create table t2 (a int PRIMARY KEY, b int);

INSERT INTO t1 VALUES (1,1), (2,1), (3,1), (4,2);
INSERT INTO t2 VALUES (1,2), (2,2);

SELECT * FROM t1 LEFT JOIN t2 ON t1.a=t2.a;
SELECT * FROM t1 LEFT JOIN t2 ON t1.a=t2.a WHERE t1.b=1;
#SELECT * FROM t1 LEFT JOIN t2 ON t1.a=t2.a
#  WHERE t1.b=1 XOR (NOT ISNULL(t2.a) AND t2.b=1);
SELECT * FROM t1 LEFT JOIN t2 ON t1.a=t2.a WHERE t1.b=1 OR (nvl(t2.a,0) AND t2.b=1);
SELECT * FROM t1 LEFT JOIN t2 ON t1.a=t2.a WHERE not((t1.a=30 and t2.b=1));
--replace_regex /Plan signature: [0-9]*/Plan signature/
--disable_result_log
EXPLAIN BASIC SELECT * FROM t1 LEFT JOIN t2 ON t1.a=t2.a WHERE not((t1.a=30 and t2.b=1));
--enable_result_log

DROP TABLE t1,t2;

# Bad warning message when group_concat() exceeds max length
#set group_concat_max_len=5;
create table t1 (a int primary key, b varchar(20));
create table t2 (a int primary key, c varchar(20));
insert into t1 values (1,'aaaaaaaaaa'),(3,'bbbbbbbbbb');
insert into t2 values (1,'cccccccccc'),(2,'dddddddddd');
--sorted_result
select concat(t1.b,t2.c) from t1 left join t2 on t1.a=t2.a group by t1.a;
--sorted_result
select concat(t1.b,t2.c) from t1 inner join t2 on t1.a=t2.a group by t1.a;
##now is error,alter it afterword;this sql is right;
--sorted_result
select concat(t1.b,t2.c) d from t1 left join t2 on t1.a=t2.a  group by d;
--sorted_result
select concat(t1.b,t2.c) from t1 inner join t2 on t1.a=t2.a group by t1.a;
drop table t1, t2;
#set group_concat_max_len=default;
# End of 4.1 tests

#
# ON is merged with WHERE, left join is convered to a regular join
#
--disable_warnings
drop table if exists t1,t2,t3;
--enable_warnings
create table t1 (gid smallint not null, x int not null, y int not null, art int not null, primary key  (gid,x,y));
insert into t1 values (1, -5, -8, 2), (1, 2, 2, 1), (1, 1, 1, 1);
create table t2 (gid smallint not null, x int not null, y int not null, id int not null, primary key  (gid,id,x,y));
insert into t2 values (1, -5, -8, 1), (1, 1, 1, 1), (1, 2, 2, 1);
create table t3 ( set_id smallint not null, id tinyint not null, name char(12) not null, primary key  (id,set_id));
insert into t3 values (0, 1, 'a'), (1, 1, 'b'), (0, 2, 'c'), (1, 2, 'd'), (1, 3, 'e'), (1, 4, 'f'), (1, 5, 'g'), (1, 6, 'h');
--replace_regex /Plan signature: [0-9]*/Plan signature/
--disable_result_log
EXPLAIN BASIC select name from t1 left join t2 on t1.x = t2.x and t1.y = t2.y
left join t3 on t1.art = t3.id where t2.id =1 and t2.x = -5 and t2.y =-8
and t1.gid =1 and t2.gid =1 and t3.set_id =1;
--enable_result_log
 select name from t1 left join t2 on t1.x = t2.x and t1.y = t2.y left join t3 on t1.art = t3.id where t2.id =1 and t2.x = -5 and t2.y =-8 and t1.gid =1 and t2.gid =1 and t3.set_id =1;
drop table t1,t2,t3;

#
# invalid conversion from outer join to inner join
# for queries containing indirect reference in WHERE clause
#
--disable_parsing
create table t1 (EMPNUM INT, GRP INT);
INSERT INTO t1 VALUES (0, 10);
INSERT INTO t1 VALUES (2, 30);

create table t2 (EMPNUM INT, NAME CHAR(5));
INSERT INTO t2 VALUES (0, 'KERI');
INSERT INTO t2 VALUES (9, 'BARRY');

CREATE VIEW v1 AS
SELECT COALESCE(t2.EMPNUM,t1.EMPNUM) AS EMPNUM, NAME, GRP
  FROM t2 LEFT OUTER JOIN t1 ON t2.EMPNUM=t1.EMPNUM;

SELECT * FROM v1;
SELECT * FROM v1 WHERE EMPNUM < 10;

DROP VIEW v1;
DROP TABLE t1,t2;
--enable_parsing
#
# false Item_equal on expression in outer join
#

create table t1 (c11 int primary key);
create table t2 (c21 int primary key);
INSERT INTO t1 VALUES (30), (40), (50);
INSERT INTO t2 VALUES (300), (400), (500);
SELECT * FROM t1 LEFT JOIN t2 ON (c11=c21 AND c21=30) WHERE c11=40;
--replace_regex /Plan signature: [0-9]*/Plan signature/
--disable_result_log
EXPLAIN BASIC SELECT * FROM t1 LEFT JOIN t2 ON (c11=c21 AND c21=30) WHERE c11=40;
--enable_result_log
DROP TABLE t1, t2;
#
# erroneously applied outer join elimination in case of WHERE NOT BETWEEN
# erroneously missing outer join elimination in case of WHERE IN/IF
#

create table t1 (a int PRIMARY KEY, b int);
create table t2 (a int PRIMARY KEY, b int);

INSERT INTO t1 VALUES (1,2), (2,1), (3,2), (4,3), (5,6), (6,5), (7,8), (8,7), (9,10);
INSERT INTO t2 VALUES (3,0), (4,1), (6,4), (7,5);

SELECT * FROM t1 LEFT JOIN t2 ON t1.a = t2.a WHERE t2.b <= t1.a AND t1.a <= t1.b;
SELECT * FROM t1 LEFT JOIN t2 ON t1.a = t2.a WHERE t1.a BETWEEN t2.b AND t1.b;
SELECT * FROM t1 LEFT JOIN t2 ON t1.a = t2.a WHERE NOT(t1.a NOT BETWEEN t2.b AND t1.b);

SELECT * FROM t1 LEFT JOIN t2 ON t1.a = t2.a WHERE t2.b > t1.a OR t1.a > t1.b;
SELECT * FROM t1 LEFT JOIN t2 ON t1.a = t2.a WHERE t1.a NOT BETWEEN t2.b AND t1.b;
SELECT * FROM t1 LEFT JOIN t2 ON t1.a = t2.a WHERE NOT(t1.a BETWEEN t2.b AND t1.b);

SELECT * FROM t1 LEFT JOIN t2 ON t1.a = t2.a WHERE t1.a = t2.a OR t2.b > t1.a OR t1.a > t1.b;
SELECT * FROM t1 LEFT JOIN t2 ON t1.a = t2.a WHERE NOT(t1.a != t2.a AND t1.a BETWEEN t2.b AND t1.b);

SELECT * FROM t1 LEFT JOIN t2 ON t1.a = t2.a WHERE t1.a = t2.a AND (t2.b > t1.a OR t1.a > t1.b);
SELECT * FROM t1 LEFT JOIN t2 ON t1.a = t2.a WHERE NOT(t1.a != t2.a OR t1.a BETWEEN t2.b AND t1.b);

SELECT * FROM t1 LEFT JOIN t2 ON t1.a = t2.a WHERE t1.a = t2.a OR t1.a = t2.b;
SELECT * FROM t1 LEFT JOIN t2 ON t1.a = t2.a WHERE t1.a IN(t2.a, t2.b);
SELECT * FROM t1 LEFT JOIN t2 ON t1.a = t2.a WHERE NOT(t1.a NOT IN(t2.a, t2.b));

SELECT * FROM t1 LEFT JOIN t2 ON t1.a = t2.a WHERE t1.a != t1.b AND t1.a != t2.b;
SELECT * FROM t1 LEFT JOIN t2 ON t1.a = t2.a WHERE t1.a NOT IN(t1.b, t2.b);
SELECT * FROM t1 LEFT JOIN t2 ON t1.a = t2.a WHERE NOT(t1.a IN(t1.b, t2.b));

SELECT * FROM t1 LEFT JOIN t2 ON t1.a = t2.a WHERE t2.a != t2.b OR (t1.a != t2.a AND t1.a != t2.b);
SELECT * FROM t1 LEFT JOIN t2 ON t1.a = t2.a WHERE NOT(t2.a = t2.b AND t1.a IN(t2.a, t2.b));

SELECT * FROM t1 LEFT JOIN t2 ON t1.a = t2.a WHERE t2.a != t2.b AND t1.a != t1.b AND t1.a != t2.b;
SELECT * FROM t1 LEFT JOIN t2 ON t1.a = t2.a WHERE NOT(t2.a = t2.b OR t1.a IN(t1.b, t2.b));

SELECT * FROM t1 LEFT JOIN t2 ON t1.a = t2.a WHERE t1.a = t2.a OR t1.a = t2.b;
--replace_regex /Plan signature: [0-9]*/Plan signature/
--disable_result_log
EXPLAIN BASIC SELECT * FROM t1 LEFT JOIN t2 ON t1.a = t2.a WHERE t1.a = t2.a OR t1.a = t2.b;
--enable_result_log
SELECT * FROM t1 LEFT JOIN t2 ON t1.a = t2.a WHERE t1.a IN(t2.a, t2.b);
--replace_regex /Plan signature: [0-9]*/Plan signature/
--disable_result_log
EXPLAIN BASIC SELECT * FROM t1 LEFT JOIN t2 ON t1.a = t2.a WHERE t1.a IN(t2.a, t2.b);
--enable_result_log
#SELECT * FROM t1 LEFT JOIN t2 ON t1.a = t2.a WHERE t1.a > IF(t1.a = t2.b-2, t2.b, t2.b-1);
--disable_result_log
#EXPLAIN BASIC SELECT * FROM t1 LEFT JOIN t2 ON t1.a = t2.a WHERE t1.a > IF(t1.a = t2.b-2, t2.b, t2.b-1);
--enable_result_log

DROP TABLE t1,t2;
--disable_parsing
#
# ORed FALSE blocked conversion of outer join into join
#

# Test case moved to join_outer_innodb

#
# over views in curly braces
#
--disable_warnings
DROP VIEW IF EXISTS v1,v2;
--disable_warnings
DROP TABLE IF EXISTS t1,t2;
--enable_warnings

create table t1 (a int);
CREATE table t2 (b int);
INSERT INTO t1 VALUES (1), (2), (3), (4), (1), (1), (3);
INSERT INTO t2 VALUES (2), (3);

CREATE VIEW v1 AS SELECT a FROM t1 JOIN t2 ON t1.a=t2.b;
CREATE VIEW v2 AS SELECT b FROM t2 JOIN t1 ON t2.b=t1.a;

--sorted_result
SELECT v1.a, v2. b
  FROM v1 LEFT OUTER JOIN v2 ON (v1.a=v2.b) AND (v1.a >= 3)
    GROUP BY v1.a;
--sorted_result
SELECT v1.a, v2. b
  FROM { OJ v1 LEFT OUTER JOIN v2 ON (v1.a=v2.b) AND (v1.a >= 3) }
    GROUP BY v1.a;

DROP VIEW v1,v2;
DROP TABLE t1,t2;
--enable_parsing
#
# with constant ORed predicates in WHERE clause
#
--disable_warnings
drop table if exists t1,t2;
--enable_warnings
create table t1 (a int primary key);
create table t2 (b int primary key);
INSERT INTO t1 VALUES (1), (2), (3), (4);
INSERT INTO t2 VALUES (2), (3);

SELECT * FROM t1 LEFT JOIN t2 ON t1.a = t2.b WHERE (1=1);
SELECT * FROM t1 LEFT JOIN t2 ON t1.a = t2.b WHERE (1=0);
--replace_regex /Plan signature: [0-9]*/Plan signature/
--disable_result_log
EXPLAIN BASIC SELECT * FROM t1 LEFT JOIN t2 ON t1.a = t2.b WHERE (1=0);
--enable_result_log

SELECT * FROM t1 LEFT JOIN t2 ON t1.a = t2.b WHERE (1 OR 1);
SELECT * FROM t1 LEFT JOIN t2 ON t1.a = t2.b WHERE (0 OR 1);
SELECT * FROM t1 LEFT JOIN t2 ON t1.a = t2.b WHERE (1=1 OR 2=2);
SELECT * FROM t1 LEFT JOIN t2 ON t1.a = t2.b WHERE (1=1 OR 1=0);
SELECT * FROM t1 LEFT JOIN t2 ON t1.a = t2.b WHERE (1=1 and 1=0);

DROP TABLE t1,t2;
#
# LEFT OUTER JOIN over two constant tables and
#            a case-insensitive comparison predicate field=const
#

create table t1 (
  f1 varchar(16)  PRIMARY KEY,
  f2 varchar(16)
);
create table t2 (
  f1 varchar(16)  PRIMARY KEY,
  f3 varchar(16)
);

INSERT INTO t1 VALUES ('bla','blah');
INSERT INTO t2 VALUES ('bla','sheep');

SELECT * FROM t1 JOIN t2 on t1.f1=t2.f1 WHERE t1.f1='Bla';
SELECT * FROM t1 LEFT JOIN t2 on t1.f1=t2.f1 WHERE t1.f1='bla';
SELECT * FROM t1 LEFT JOIN t2 on t1.f1=t2.f1 WHERE t1.f1='Bla';

DROP TABLE t1,t2;

#
# 'not exists' optimization for outer joins
#

create table t1 (id int PRIMARY KEY, a varchar(8));
create table t2 (id int NOT NULL, b int NOT NULL, primary key(id,b));
INSERT INTO t1 VALUES
  (1,'aaaaaaa'), (5,'eeeeeee'), (4,'ddddddd'), (2,'bbbbbbb'), (3,'ccccccc');
INSERT INTO t2 VALUES
  (3,10), (2,20), (5,30), (3,20), (5,10), (3,40), (3,30), (2,10), (2,40);

--disable_result_log
EXPLAIN BASIC
SELECT t1.id, a FROM t1 LEFT JOIN t2 ON t1.id=t2.id WHERE t2.b IS NULL;
--enable_result_log

SELECT t1.id, a FROM t1 LEFT JOIN t2 ON t1.id=t2.id WHERE t2.b IS NULL;
SELECT t1.id, a FROM t1 LEFT JOIN t2 ON t1.id=t2.id WHERE t2.b IS not NULL;
DROP TABLE t1,t2;

#
# outer join with false on condition over constant tables
#

create table t1 (c int  PRIMARY KEY, e int NOT NULL);
INSERT INTO t1 VALUES (1,0), (2,1);
create table t2 (d int PRIMARY KEY);
INSERT INTO t2 VALUES (1), (2), (3);

--replace_regex /Plan signature: [0-9]*/Plan signature/
--disable_result_log
EXPLAIN BASIC SELECT * FROM t1 LEFT JOIN t2 ON e<>0 and  t1.c=t2.d WHERE c=1 AND d IS NULL;
--enable_result_log
SELECT * FROM t1 LEFT JOIN t2 ON e<>0 and t1.c=t2.d WHERE c=1 AND d IS NULL;
SELECT * FROM t1 LEFT JOIN t2 ON e<>0 and t1.c=t2.d WHERE c=1 AND d IS not NULL;
SELECT * FROM t1 LEFT JOIN t2 ON e<>0 and t1.c=t2.d WHERE c=1 AND d<=>NULL;

DROP TABLE t1,t2;
--disable_parsing
--echo #
--echo # : using group by with rollup without indexes returns incorrect
--echo # results with where
--echo #
create table t1 ( a INT );
INSERT INTO t1 VALUES (1);

create table t2 ( a INT, b INT );
INSERT INTO t2 VALUES (1, 1),(1, 2),(1, 3),(2, 4),(2, 5);

--disable_result_log
EXPLAIN BASIC
--enable_result_log
--sorted_result
SELECT t1.a, COUNT( t2.b ), SUM( t2.b ), MAX( t2.b )
FROM t1 LEFT JOIN t2 USING( a )
GROUP BY t1.a WITH ROLLUP;

--sorted_result
SELECT t1.a, COUNT( t2.b ), SUM( t2.b ), MAX( t2.b )
FROM t1 LEFT JOIN t2 USING( a )
GROUP BY t1.a WITH ROLLUP;

--disable_result_log
EXPLAIN BASIC
--enable_result_log
--sorted_result
SELECT t1.a, COUNT( t2.b ), SUM( t2.b ), MAX( t2.b )
FROM t1 JOIN t2 USING( a )
GROUP BY t1.a WITH ROLLUP;

--sorted_result
SELECT t1.a, COUNT( t2.b ), SUM( t2.b ), MAX( t2.b )
FROM t1 JOIN t2 USING( a )
GROUP BY t1.a WITH ROLLUP;

DROP TABLE t1, t2;
--enable_parsing
--echo #
--echo # Inconsistent behaviour with a COALESCE statement inside an IN comparison
--echo #
create table t1(f1 INT, f2 INT primary key, f3 INT);
INSERT INTO t1 VALUES (1, NULL, 3);
create table t2(f1 INT, f2 INT primary key);
INSERT INTO t2 VALUES (2, 1);

--replace_regex /Plan signature: [0-9]*/Plan signature/
--disable_result_log
EXPLAIN BASIC  SELECT * FROM t1 LEFT JOIN t2 ON t1.f2 = t2.f2
WHERE (COALESCE(t1.f1, t2.f1), f3) IN ((1, 3), (2, 2));
--enable_result_log

SELECT * FROM t1 LEFT JOIN t2 ON t1.f2 = t2.f2
WHERE (COALESCE(t1.f1, t2.f1), f3) IN ((1, 3), (2, 2));

DROP TABLE t1, t2;
--disable_parsing
--echo #
--echo # Assertion failed: join->best_read in greedy_search
--echo # optimizer_search_depth=0
--echo #
create table t1( a INT );

INSERT INTO t1 VALUES (1),(2);
SET optimizer_search_depth = 0;

--echo # Should not core dump on query preparation
--disable_result_log
EXPLAIN BASIC
--enable_result_log
SELECT 1
FROM t1 tt3 LEFT  OUTER JOIN t1 tt4 ON 1
            LEFT  OUTER JOIN t1 tt5 ON 1
            LEFT  OUTER JOIN t1 tt6 ON 1
            LEFT  OUTER JOIN t1 tt7 ON 1
            LEFT  OUTER JOIN t1 tt8 ON 1
            RIGHT OUTER JOIN t1 tt2 ON 1
            RIGHT OUTER JOIN t1 tt1 ON 1
            STRAIGHT_JOIN    t1 tt9 ON 1;

SET optimizer_search_depth = DEFAULT;
DROP TABLE t1;

--echo #
--echo # STRAIGHT_JOIN + RIGHT JOIN returns different result
--echo #
create table t1 (f1 INT NOT NULL);
INSERT INTO t1 VALUES (9),(0);

create table t2 (f1 INT NOT NULL);
INSERT INTO t2 VALUES
(5),(3),(0),(3),(1),(0),(1),(7),(1),(0),(0),(8),(4),(9),(0),(2),(0),(8),(5),(1);

SELECT STRAIGHT_JOIN COUNT(*) FROM t1 TA1
RIGHT JOIN t2 TA2 JOIN t2 TA3 ON TA2.f1 ON TA3.f1;

--replace_regex /Plan signature: [0-9]*/Plan signature/
--disable_result_log
EXPLAIN BASIC SELECT STRAIGHT_JOIN COUNT(*) FROM t1 TA1
--enable_result_log
RIGHT JOIN t2 TA2 JOIN t2 TA3 ON TA2.f1 ON TA3.f1;

DROP TABLE t1, t2;

--echo #
--echo # Segfault in add_found_match_trig_cond () at sql_select.cc:5990
--echo #
create table t1(f1 INT, PRIMARY KEY (f1));
INSERT INTO t1 VALUES (1),(2);

--replace_regex /Plan signature: [0-9]*/Plan signature/
--disable_result_log
EXPLAIN BASIC EXTENDED SELECT STRAIGHT_JOIN jt1.f1 FROM t1 AS jt1
--enable_result_log
 LEFT JOIN t1 AS jt2
  RIGHT JOIN t1 AS jt3
    JOIN t1 AS jt4 ON 1
   LEFT JOIN t1 AS jt5 ON 1
  ON 1
  RIGHT JOIN t1 AS jt6 ON jt6.f1
 ON 1;

--replace_regex /Plan signature: [0-9]*/Plan signature/
--disable_result_log
EXPLAIN BASIC EXTENDED SELECT STRAIGHT_JOIN jt1.f1 FROM t1 AS jt1
--enable_result_log
 RIGHT JOIN t1 AS jt2
  RIGHT JOIN t1 AS jt3
    JOIN t1 AS jt4 ON 1
   LEFT JOIN t1 AS jt5 ON 1
  ON 1
  RIGHT JOIN t1 AS jt6 ON jt6.f1
 ON 1;

DROP TABLE t1;

--echo #
--echo # Assertion `!table || (!table->write_set || bitmap_is_set(table->write_set, field
--echo #

--enable_parsing
create table t1 (f1 INT NOT NULL, PRIMARY KEY (f1));
create table t2 (f1 INT NOT NULL, f2 INT NOT NULL, PRIMARY KEY (f1, f2));

INSERT INTO t1 VALUES (4);
INSERT INTO t2 VALUES (3, 3);
INSERT INTO t2 VALUES (7, 7);

--replace_regex /Plan signature: [0-9]*/Plan signature/
--disable_result_log
EXPLAIN BASIC SELECT * FROM t1 LEFT JOIN t2 ON t2.f1 = t1.f1
WHERE t1.f1 = 4
GROUP BY t2.f1, t2.f2;
--enable_result_log

--sorted_result
SELECT * FROM t1 LEFT JOIN t2 ON t2.f1 = t1.f1
WHERE t1.f1 = 4
GROUP BY t2.f1, t2.f2;

--replace_regex /Plan signature: [0-9]*/Plan signature/
--disable_result_log
EXPLAIN BASIC SELECT * FROM t1 LEFT JOIN t2 ON t2.f1 = t1.f1
WHERE t1.f1 = 4 AND t2.f1 IS NOT NULL AND t2.f2 IS NOT NULL
GROUP BY t2.f1, t2.f2;
--enable_result_log

--sorted_result
SELECT * FROM t1 LEFT JOIN t2 ON t2.f1 = t1.f1
WHERE t1.f1 = 4 AND t2.f1 IS NOT NULL AND t2.f2 IS NOT NULL
GROUP BY t2.f1, t2.f2;

DROP TABLE t1,t2;

--disable_parsing
--echo #
--echo # incorrect OUTER JOIN result when joined on unique key
--echo #

create table t1 (pk INT PRIMARY KEY,
                 col_int INT,
                 col_int_unique INT UNIQUE KEY);
INSERT INTO t1 VALUES (1,NULL,2), (2,0,0);

create table t2 (pk INT PRIMARY KEY,
                 col_int INT,
                 col_int_unique INT UNIQUE KEY);
INSERT INTO t2 VALUES (1,0,1), (2,0,2);

--disable_result_log
EXPLAIN BASIC
--enable_result_log
SELECT * FROM t1 LEFT JOIN t2
  ON t1.col_int_unique = t2.col_int_unique AND t1.col_int = t2.col_int
  WHERE t1.pk=1;

SELECT * FROM t1 LEFT JOIN t2
  ON t1.col_int_unique = t2.col_int_unique AND t1.col_int = t2.col_int
  WHERE t1.pk=1;

DROP TABLE t1,t2;

--echo #
--echo # Server incorrectly processing JOINs on NULL values
--echo #

--enable_parsing
--disable_warnings
drop table if exists BB;
--enable_warnings
create table BB (
  pk int NOT NULL AUTO_INCREMENT,
  time_key datetime DEFAULT NULL,
  varchar_key varchar(1) DEFAULT NULL,
  varchar_nokey varchar(1) DEFAULT NULL,
  PRIMARY KEY (pk)
)  ;

INSERT INTO BB VALUES (10,'2014-08-19 18:27:58',NULL,NULL);

SELECT table1.time_key AS field1, table2.pk
FROM BB table1  LEFT JOIN BB table2
 ON table2.varchar_nokey = table1.varchar_key;
# HAVING field1;
--disable_parsing
DROP TABLE BB;
--echo #
--echo # Server incorrectly processing RIGHT JOIN with
--echo #           constant WHERE clause and no index
--echo #

create table `BB` (
  `col_datetime_key` datetime DEFAULT NULL,
  `col_varchar_key` varchar(1) DEFAULT NULL,
  `col_varchar_nokey` varchar(1) DEFAULT NULL,
  KEY `col_datetime_key` (`col_datetime_key`),
  KEY `col_varchar_key` (`col_varchar_key`)
)  DEFAULT CHARSET=latin1;

INSERT INTO `BB` VALUES ('1900-01-01 00:00:00',NULL,NULL);

SELECT table1.col_datetime_key
FROM BB table1 RIGHT JOIN BB table2
 ON table2 .col_varchar_nokey = table1.col_varchar_key
 WHERE 7;

# Disable keys, and we get incorrect result for the same query
ALTER TABLE BB DISABLE KEYS;

SELECT table1.col_datetime_key
FROM BB table1 RIGHT JOIN BB table2
 ON table2 .col_varchar_nokey = table1.col_varchar_key
 WHERE 7;

DROP TABLE BB;


--enable_parsing
--echo #
--echo # Incorrect result in multi level OUTER JOIN
--echo # in combination with IS NULL
--echo #
--disable_warnings
drop table if exists t1,t2,t3,t4;
--enable_warnings
create table t1 (i INT NOT NULL primary key);
INSERT INTO t1 VALUES (0),    (2),(3),(4);
create table t2 (i INT NOT NULL primary key);
INSERT INTO t2 VALUES (0),(1),    (3),(4);
create table t3 (i INT NOT NULL primary key);
INSERT INTO t3 VALUES (0),(1),(2),    (4);
create table t4 (i INT NOT NULL primary key);
INSERT INTO t4 VALUES (0),(1),(2),(3)   ;
 SELECT * FROM t1 LEFT JOIN t2 ON t2.i = t1.i  LEFT JOIN t3  ON t3.i = t2.i  LEFT JOIN t4 ON t4.i = t3.i order by t1.i;
--disable_parsing
#SELECT * FROM
# t1 LEFT JOIN
# ( t2 LEFT JOIN
#   ( t3 LEFT JOIN
 #    t4
 #    ON t4.i = t3.i
 #  )
 #  ON t3.i = t2.i
 #)
 #ON t2.i = t1.i
 #;

SELECT * FROM
 t1 LEFT JOIN
 ( t2 LEFT JOIN
   ( t3 LEFT JOIN
     t4
     ON t4.i = t3.i
   )
   ON t3.i = t2.i
 )
 ON t2.i = t1.i
 WHERE t4.i IS NULL;


# Most simplified testcase to reproduce the bug.
# (Has to be at least a two level nested outer join)
SELECT * FROM
 t1 LEFT JOIN
 ( ( t2 LEFT JOIN
     t3
     ON t3.i = t2.i
   )
 )
 ON t2.i = t1.i
 WHERE t3.i IS NULL;


# Extended testing:
# We then add some equi-join inside the query above:
# (There Used to be some problems here with first
#  proposed patch for this bug)
SELECT * FROM
 t1 LEFT JOIN
 ( ( t2 LEFT JOIN
     t3
     ON t3.i = t2.i
   )
   JOIN t4
   ON t4.i=t2.i
 )
 ON t2.i = t1.i
 WHERE t3.i IS NULL;

SELECT * FROM
 t1 LEFT JOIN
 ( ( t2 LEFT JOIN
     t3
     ON t3.i = t2.i
   )
   JOIN (t4 AS t4a JOIN t4 AS t4b ON t4a.i=t4b.i)
   ON t4a.i=t2.i
 )
 ON t2.i = t1.i
 WHERE t3.i IS NULL;

SELECT * FROM
 t1 LEFT JOIN
 ( ( t2 LEFT JOIN
     t3
     ON t3.i = t2.i
   )
   JOIN (t4 AS t4a, t4 AS t4b)
   ON t4a.i=t2.i
 )
 ON t2.i = t1.i
 WHERE t3.i IS NULL;


DROP TABLE t1,t2,t3,t4;

--echo #
--echo # Server is adding extra NULL row
--echo # on processing a WHERE clause
--echo #
--enable_parsing
--disable_warnings
drop table if exists h,m,k;
--enable_warnings
create table h (pk INT NOT NULL primary key, col_int_key INT);
INSERT INTO h VALUES (1,NULL),(4,2),(5,2),(3,4),(2,8);

create table m (pk INT NOT NULL primary key, col_int_key INT);
INSERT INTO m VALUES (1,2),(2,7),(3,5),(4,7),(5,5),(6,NULL),(7,NULL),(8,9);
create table k (pk INT NOT NULL primary key, col_int_key INT);
INSERT INTO k VALUES (1,9),(2,2),(3,5),(4,2),(5,7),(6,0),(7,5);

# Baseline query wo/ 'WHERE ... IS NULL' - was correct
SELECT TABLE1.pk FROM k TABLE1
RIGHT JOIN h TABLE2 ON TABLE1.col_int_key=TABLE2.col_int_key
RIGHT JOIN m TABLE4 ON TABLE2.col_int_key=TABLE4.col_int_key order by TABLE1.pk;

# Adding 'WHERE ... IS NULL' -> incorrect result
#SELECT TABLE1.pk FROM k TABLE1
#RIGHT JOIN h TABLE2 ON TABLE1.col_int_key=TABLE2.col_int_key
#RIGHT JOIN m TABLE4 ON TABLE2.col_int_key=TABLE4.col_int_key
#WHERE TABLE1.pk IS NULL;

select * from m left join k on m.pk = k.pk left join h on m.pk = k.pk order by m.col_int_key;
--disable_parsing


--echo
--echo # INFINITE LOOP WHEN RESOLVING AN ALIASED COLUMN
--echo # USED IN GROUP BY
--echo
create table t1 (
  col_varchar_1024_latin1_key varchar(1024),
  col_varchar_10_latin1 varchar(10),
  col_int int,
  pk int
);
create table t2 (
  col_int_key int,
  col_int int,
  pk int
);

PREPARE prep_stmt_9846 FROM '
SELECT alias1.pk AS field1 FROM
t1 AS alias1
LEFT JOIN
(
  t2 AS alias2
  RIGHT  JOIN
  (
    t2 AS alias3
    JOIN t1 AS alias4
    ON 1
  )
  ON 1
)
ON 1
GROUP BY field1';
execute prep_stmt_9846;
execute prep_stmt_9846;
drop table t1,t2;

--echo #
--echo # SERVER THREAD HANGS WHEN JOIN + WHERE + GROUP BY
--echo # IS EXECUTED TWICE FROM P
--echo #
create table t1 ( a INT ) ENGINE = MYISAM;
INSERT INTO t1 VALUES (1);
PREPARE prep_stmt FROM '
 SELECT 1 AS f FROM t1
 LEFT JOIN t1 t2
  RIGHT JOIN t1 t3
    JOIN t1 t4
   ON 1
  ON 1
 ON 1
 GROUP BY f';
EXECUTE prep_stmt;
EXECUTE prep_stmt;

DROP TABLE t1;


--enable_parsing
--echo End of 5.1 tests
