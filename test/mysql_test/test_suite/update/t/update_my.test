#owner: yuchen.wyc
#owner group: SQL1
#
#
# test of updating of keys
#

--disable_warnings
drop table if exists t1,t2, v1, obright_part;
drop view if exists v1;
--enable_warnings
--result_format 4

create table t1 (a int auto_increment , primary key (a));
insert into t1 values (NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL); 
update t1 set a=a+10 where a > 34;
update t1 set a=a+100 where a > 0;

# Some strange updates to test some otherwise unused code
update t1 set a=a+100 where a=1 and a=2;
--error 1054
update t1 set a=b+100 where a=1 and a=2; 
--error 1054
update t1 set a=b+100 where c=1 and a=2; 
--error 1054
update t1 set d=a+100 where a=1;
select * from t1;
drop table t1;

CREATE TABLE t1
 (
 place_id int (10) unsigned NOT NULL,
 shows int(10) unsigned DEFAULT '0' NOT NULL,
 ishows int(10) unsigned DEFAULT '0' NOT NULL,
 ushows int(10) unsigned DEFAULT '0' NOT NULL,
 clicks int(10) unsigned DEFAULT '0' NOT NULL,
 iclicks int(10) unsigned DEFAULT '0' NOT NULL,
 uclicks int(10) unsigned DEFAULT '0' NOT NULL,
 ts timestamp,
 PRIMARY KEY (place_id,ts)
 );

INSERT INTO t1 (place_id,shows,ishows,ushows,clicks,iclicks,uclicks,ts)
VALUES (1,0,0,0,0,0,0,20000928174434);
UPDATE t1 SET shows=shows+1,ishows=ishows+1,ushows=ushows+1,clicks=clicks+1,iclicks=iclicks+1,uclicks=uclicks+1 WHERE place_id=1 AND ts>="2000-09-28 00:00:00";
select place_id,shows from t1;
drop table t1;

CREATE TABLE t1 (
  lfdnr int(10) unsigned NOT NULL default '0',
  ticket int(10) unsigned NOT NULL default '0',
  client varchar(255) NOT NULL default '',
  replyto varchar(255) NOT NULL default '',
  subject varchar(100) NOT NULL default '',
  timestamp int(10) unsigned NOT NULL default '0',
  tstamp timestamp NOT NULL,
  status int(3) NOT NULL default '0',
  type varchar(15) NOT NULL default '',
  assignment int(10) unsigned NOT NULL default '0',
  fupcount int(4) unsigned NOT NULL default '0',
  parent int(10) unsigned NOT NULL default '0',
  activity int(10) unsigned NOT NULL default '0',
  priority tinyint(1) unsigned NOT NULL default '1',
  cc varchar(255) NOT NULL default '',
  bcc varchar(255) NOT NULL default '',
  body varchar(1024) NOT NULL,
  comment varchar(1024),
  header varchar(1024),
  PRIMARY KEY  (lfdnr),
  KEY k1 (timestamp),
  KEY k2 (type),
  KEY k3 (parent),
  KEY k4 (assignment),
  KEY ticket (ticket)
);

INSERT INTO t1 VALUES (773,773,'','','',980257344,20010318180652,0,'Open',10,0,0,0,1,'','','','','');
update t1 set status=1 where type='Open';
select status from t1;
drop table t1;

#
# Test of ORDER BY
#

create table t1 (a int not null, b int not null, key (a));
insert into t1 values (1,1),(1,2),(1,3),(3,1),(3,2),(3,3),(3,1),(3,2),(3,3),(2,1),(2,2),(2,3);
SET @tmp=0;
update t1 set b=(@tmp:=@tmp+1) order by a;
update t1 set b=99 where a=1 order by b asc limit 1;
select * from t1 order by a,b;
update t1 set b=100 where a=1 order by b desc limit 2;
update t1 set a=a+10+b where a=1 order by b;
select * from t1 order by a,b;
create table t2 (a int not null, b int not null);
insert into t2 values (1,1),(1,2),(1,3);
update t1 set b=(select distinct 1 from (select * from t2) a);
drop table t1,t2;

CREATE TABLE t1 (
   `id_param` smallint(3) unsigned NOT NULL default '0',
   `nom_option` char(40) NOT NULL default '',
   `valid` tinyint(1) NOT NULL default '0',
   KEY `id_param` (`id_param`,`nom_option`)
 );

INSERT INTO t1 (id_param,nom_option,valid) VALUES (185,'600x1200',1);

UPDATE t1 SET nom_option='test' WHERE id_param=185 AND nom_option='600x1200' AND valid=1 LIMIT 1;
select * from t1;
drop table t1;

#
# Multi table update test
#

create table t1 (F1 VARCHAR(30), F2 VARCHAR(30), F3 VARCHAR(30), cnt int, groupid int, KEY groupid_index (groupid));

insert into t1 (F1,F2,F3,cnt,groupid) values ('0','0','0',1,6),
('0','1','2',1,5), ('0','2','0',1,3), ('1','0','1',1,2),
('1','2','1',1,1), ('1','2','2',1,1), ('2','0','1',2,4),
('2','2','0',1,7);
delete from m1 using t1 m1,t1 m2 where m1.groupid=m2.groupid and (m1.cnt < m2.cnt or m1.cnt=m2.cnt and m1.F3>m2.F3);
select * from t1;
drop table t1;

CREATE TABLE t1 ( 
   `colA` int(10) unsigned NOT NULL auto_increment,
   `colB` int(11) NOT NULL default '0',
   PRIMARY KEY  (`colA`)
);

INSERT INTO t1 VALUES (4433,5424);
CREATE TABLE t2 (
  `colC` int(10) unsigned NOT NULL default '0',
  `colA` int(10) unsigned NOT NULL default '0',
  `colD` int(10) unsigned NOT NULL default '0',
  `colE` int(10) unsigned NOT NULL default '0',
  `colF` int(10) unsigned NOT NULL default '0',
  PRIMARY KEY  (`colC`,`colA`,`colD`,`colE`)
);
INSERT INTO t2 VALUES (3,4433,10005,495,500);
INSERT INTO t2 VALUES (3,4433,10005,496,500);
INSERT INTO t2 VALUES (3,4433,10009,494,500);
INSERT INTO t2 VALUES (3,4433,10011,494,500);
INSERT INTO t2 VALUES (3,4433,10005,497,500);
INSERT INTO t2 VALUES (3,4433,10013,489,500);
INSERT INTO t2 VALUES (3,4433,10005,494,500);
INSERT INTO t2 VALUES (3,4433,10005,493,500);
INSERT INTO t2 VALUES (3,4433,10005,492,500);
UPDATE t2,t1 set t2.colE = t2.colE + 10,colF=0 WHERE t1.colA = t2.colA AND (t1.colB & 4096) > 0 AND (colE + 1) < colF;
SELECT * FROM t2;
DROP TABLE t1;
DROP TABLE t2;

create table t1 (c1 int, c2 char(6), c3 int);
create table t2 (c1 int, c2 char(6));
insert into t1 values (1, "t1c2-1", 10), (2, "t1c2-2", 20);
update t1 left join t2 on t1.c1 = t2.c1 set t2.c2 = "t2c2-1";
update t1 left join t2 on t1.c1 = t2.c1 set t2.c2 = "t2c2-1" where t1.c3 = 10;
drop table t1, t2;

create table t1 (id int not null auto_increment primary key, id_str varchar(32));
insert into t1 (id_str) values ("test");
update t1 set id_str = concat(id_str, id) where id = last_insert_id();
select * from t1;
drop table t1;

create table t1 (a int, b char(255), key(a, b(20)));
insert into t1 values (0, '1');
update t1 set b = b + 1 where a = 0;
select * from t1;
drop table t1;

create table t1 (a int, b varchar(10), key b(b(5)));
create table t2 (a int, b varchar(10));
insert into t1 values ( 1, 'abcd1e');
insert into t1 values ( 2, 'abcd2e');
insert into t2 values ( 1, 'abcd1e');
insert into t2 values ( 2, 'abcd2e');
update t1, t2 set t1.a = t2.a where t2.b = t1.b;
show warnings;
drop table t1, t2;

create table t1(f1 int, f2 int);
create table t2(f3 int, f4 int);
create index idx on t2(f3);
insert into t1 values(1,0),(2,0);
insert into t2 values(1,1),(2,2);
UPDATE t1 SET t1.f2=(SELECT MAX(t2.f4) FROM t2 WHERE t2.f3=t1.f1);
select * from t1;
drop table t1,t2;

create table t1(f1 int);
select DATABASE();
--error 1111
update t1 set f1=1 where count(*)=1;
select DATABASE();
--error 1111
delete from t1 where count(*)=1;
drop table t1;

#
# Bug#15028 Multitable update returns different numbers of matched rows
#           depending on table order
create table t1 (f1 int);
create table t2 (f2 int);
insert into t1 values(1),(2);
insert into t2 values(1),(1);
--enable_info
update t1,t2 set f1=3,f2=3 where f1=f2 and f1=1;
--disable_info
update t2 set f2=1;
update t1 set f1=1 where f1=3;
--enable_info
update t2,t1 set f1=3,f2=3 where f1=f2 and f1=1;
--disable_info
drop table t1,t2;

#
# Bug #16510 Updating field named like '*name' caused server crash
#
create table t1(f1 int, `*f2` int);
insert into t1 values (1,1);
update t1 set `*f2`=1;
drop table t1;

#
# Bug#25126: Wrongly resolved field leads to a crash
#
create table t1(f1 int);
--error 1054
update t1 set f2=1 order by f2;
drop table t1;
# End of 4.1 tests

#
# Bug #24035: performance degradation with condition int_field=big_decimal
#

CREATE TABLE t1 (
  request_id int unsigned NOT NULL auto_increment,
  user_id varchar(12) default NULL,
  time_stamp datetime NOT NULL default '0000-00-00 00:00:00',
  ip_address varchar(15) default NULL,
  PRIMARY KEY (request_id),
  KEY user_id_2 (user_id,time_stamp)
);

INSERT INTO t1 (user_id) VALUES ('user1');
INSERT INTO t1(user_id) SELECT user_id FROM t1;
INSERT INTO t1(user_id) SELECT user_id FROM t1;
INSERT INTO t1(user_id) SELECT user_id FROM t1;
INSERT INTO t1(user_id) SELECT user_id FROM t1;
INSERT INTO t1(user_id) SELECT user_id FROM t1;
INSERT INTO t1(user_id) SELECT user_id FROM t1;
INSERT INTO t1(user_id) SELECT user_id FROM t1;
INSERT INTO t1(user_id) SELECT user_id FROM t1;

SELECT user_id FROM t1 WHERE request_id=9999999999999; 
SELECT user_id FROM t1 WHERE request_id=999999999999999999999999999999; 
UPDATE t1 SET user_id=null WHERE request_id=9999999999999;
UPDATE t1 SET user_id=null WHERE request_id=999999999999999999999999999999;

DROP TABLE t1;

#
# Bug #24010: INSERT INTO ... SELECT fails on unique constraint with data it 
# doesn't select
#
CREATE TABLE t1 (

  a INT(11),
  quux decimal( 31, 30 ),

  UNIQUE KEY bar (a),
  KEY quux (quux)
);

INSERT INTO
 t1 ( a, quux )
VALUES
    ( 1,    1 ),
    ( 2,  0.1 );

INSERT INTO t1( a )
  SELECT @newA := 1 + a FROM t1 WHERE quux <= 0.1;

SELECT * FROM t1;

DROP TABLE t1;

# Create the test tables
create table t1 (id int, a int, key idx(a));
create table t2 (id int unsigned not null auto_increment primary key, a int);
insert into t2(a) values(1),(2),(3),(4),(5),(6),(7),(8);
insert into t2(a) select a from t2; 
insert into t2(a) select a from t2;
insert into t2(a) select a from t2; 
update t2 set a=id;
insert into t1 select * from t2;

# Check that the number of matched rows is correct when the temporary
# table is small enough to not be converted to MyISAM
select count(*) from t1 join t2 on (t1.a=t2.a);
--enable_info
update t1 join t2 on (t1.a=t2.a) set t1.id=t2.id;
--disable_info

# Increase table sizes
insert into t2(a) select a from t2; 
update t2 set a=id; 
truncate t1; 
insert into t1 select * from t2; 

# Check that the number of matched rows is correct when the temporary
# table has to be converted to MyISAM
select count(*) from t1 join t2 on (t1.a=t2.a);
--enable_info
update t1 join t2 on (t1.a=t2.a) set t1.id=t2.id;
--disable_info

# Check that the number of matched rows is correct when there are duplicate
# key errors
update t1 set a=1;
update t2 set a=1;
select count(*) from t1 join t2 on (t1.a=t2.a);
--enable_info
update t1 join t2 on (t1.a=t2.a) set t1.id=t2.id;
--disable_info

drop table t1,t2;


CREATE TABLE t1 (f1 INTEGER AUTO_INCREMENT, PRIMARY KEY (f1));
CREATE TABLE t2 LIKE t1;
INSERT INTO t1 VALUES (1);
INSERT INTO t2 VALUES (1);

ALTER TABLE t2 COMMENT = 'ABC';
UPDATE t2, t1 SET t2.f1 = 2, t1.f1 = 9;
ALTER TABLE t2 COMMENT = 'DEF';

DROP TABLE t1, t2;

--echo #
--echo # Bug#50545: Single table UPDATE IGNORE crashes on join view in
--echo # sql_safe_updates mode.
--echo #
CREATE TABLE t1 ( a INT, KEY( a ) );
INSERT INTO t1 VALUES (0), (1);
CREATE VIEW v1 AS SELECT t11.a, t12.a AS b FROM t1 t11, t1 t12;
UPDATE v1 SET a = 1;

DROP TABLE t1;
DROP VIEW v1;

--echo #
--echo # Verify that UPDATE does the same number of handler_update
--echo # operations, no matter if there is ORDER BY or not.
--echo #

CREATE TABLE t1 (i INT) ENGINE=INNODB;
INSERT INTO t1 VALUES (10),(11),(12),(13),(14),(15),(16),(17),(18),(19),
                      (20),(21),(22),(23),(24),(25),(26),(27),(28),(29),
                      (30),(31),(32),(33),(34),(35);
CREATE TABLE t2 (a CHAR(2), b CHAR(2), c CHAR(2), d CHAR(2),
                 INDEX idx (a,b(1),c)) ENGINE=INNODB;
INSERT INTO t2 SELECT i, i, i, i FROM t1;
START TRANSACTION;
UPDATE t2 SET d = 10 WHERE b = 10 LIMIT 5;
SHOW STATUS LIKE 'HANDLER_UPDATE';
ROLLBACK;
START TRANSACTION;
UPDATE t2 SET d = 10 WHERE b = 10 ORDER BY a, c LIMIT 5;
SHOW STATUS LIKE 'HANDLER_UPDATE';
ROLLBACK;

--echo Same test with a different UPDATE.

ALTER TABLE t2 DROP INDEX idx;
alter table t2 ADD INDEX idx2 (a, b);
START TRANSACTION;
UPDATE t2 SET c = 10 LIMIT 5;
SHOW STATUS LIKE 'HANDLER_UPDATE';
ROLLBACK;
START TRANSACTION;
UPDATE t2 SET c = 10 ORDER BY a, b DESC LIMIT 5;
SHOW STATUS LIKE 'HANDLER_UPDATE';
ROLLBACK;
DROP TABLE t1, t2;

#--explain_protocol 1
create table t1(c1 int primary key, c2 int);
create table t2(c1 int primary key, c2 int);
insert into t1 values(1, 1), (2, 2);
insert into t2 values(2, 2), (3, 3);
update t1, (select count(1) as a from t2) t set t1.c1=t.a+1 where t1.c1=1;
select * from t1;
--error 1288
update t1 join (select * from t2) t set t.c1=t1.c1 where t1.c1=0;
select * from t1;
update t1 join t2 using(c1) set c1=1 where t1.c1=1;
select * from t1;
update t1, t2 set t1.c1=t2.c1+2, t2.c1=t1.c1+2 where t1.c2=t2.c2;
drop table t1, t2;

--disable_warnings
drop database if exists multi_dml;
--enable_warnings
create database multi_dml;
create table multi_dml.t1(c1 int primary key, c2 int);
create table t1(c1 int primary key, c2 int);
create table t2(c1 int primary key, c2 int);
insert into multi_dml.t1 values(1, 1), (2, 2);
insert into t1 values(1, 1), (2, 2);
insert into t2 values(2, 2), (3, 3);
delete from t1 using test.t2 join multi_dml.t1 on t1.c1=t2.c1;
--error 1052
delete from t1 using test.t1 join multi_dml.t1 on t1.c1=t1.c1;
delete from t1, t2 using t1, t2 where t1.c1=t2.c1;
select * from t1;
select * from t2;
drop table t1, t2;
drop database multi_dml;

CREATE TABLE `obright_part` (
  `grp_id` bigint(20) NOT NULL,
  `row_id` bigint(20) NOT NULL,
  `row_hex` varchar(2048) NOT NULL,
  `trx_grp` bigint(20) DEFAULT NULL,
  `v1` varchar(65536) DEFAULT NULL,
  `v1_check` bigint(20) DEFAULT NULL,
  `v2` varchar(65536) DEFAULT NULL,
  `v2_check` bigint(20) DEFAULT NULL,
  `r1` int(11) DEFAULT NULL,
  `r2` int(11) DEFAULT NULL,
  `glike` varchar(4096) DEFAULT NULL,
  `c1` bigint(20) DEFAULT NULL,
  `c2` bigint(20) DEFAULT NULL,
  `c3` bigint(20) DEFAULT NULL,
  `c4` bigint(20) DEFAULT NULL,
  `c5` bigint(20) DEFAULT NULL,
  `c6` tinyint(4) DEFAULT NULL,
  `c7` bigint(20) DEFAULT NULL,
  `c8` bigint(20) DEFAULT NULL,
  `c9` bigint(20) DEFAULT NULL,
  `c10` bigint(20) DEFAULT NULL,
  `v3` varchar(1024) DEFAULT NULL,
  `ts` timestamp(6) NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
  `t1` timestamp(6) NULL DEFAULT NULL,
  `t2` datetime(6) DEFAULT NULL,
  `dec1` decimal(16,4) DEFAULT NULL,
  `dec2` decimal(16,4) DEFAULT NULL,
  `dec3` decimal(16,6) DEFAULT NULL,
  `b1` tinyint(1) DEFAULT NULL,
  `d1` bigint(20) DEFAULT '0',
  `ac1` bigint(20) NOT NULL AUTO_INCREMENT,
  `gmt_create` timestamp(6) NULL DEFAULT CURRENT_TIMESTAMP(6),
  `gmt_modified` timestamp(6) NULL DEFAULT CURRENT_TIMESTAMP(6),
  PRIMARY KEY (`grp_id`, `row_id`, `row_hex`),
  UNIQUE KEY `obright_part1_uniq` (`t1`, `grp_id`, `row_id`, `row_hex`) LOCAL,
  UNIQUE KEY `obright_part2_uniq` (`trx_grp`, `r1`, `row_hex`, `row_id`, `grp_id`) LOCAL,
  UNIQUE KEY `obright_part3_uniq` (`row_hex`, `grp_id`, `row_id`) LOCAL,
  UNIQUE KEY `obright_part4_uniq` (`trx_grp`, `row_hex`, `grp_id`) STORING (`v1`, `v1_check`, `r1`, `r2`) LOCAL,
  KEY `obright_part2` (`trx_grp`, `row_id`, `ac1`) LOCAL,
  KEY `obright_part3` (`glike`) LOCAL,
  KEY `obright_part4` (`t1`, `ts`, `dec1`, `dec2`) STORING (`v1`, `v1_check`, `r1`, `r2`) LOCAL,
  KEY `obright_part5` (`v1_check`, `v2_check`) LOCAL,
  KEY `obright_part6` (`row_hex`, `v1_check`) STORING (`r1`, `glike`, `t1`) LOCAL,
  KEY `obright_part1` (`row_id`) GLOBAL,
  KEY `obright_part7` (`grp_id`, `row_id`, `row_hex`, `trx_grp`, `v1_check`, `r1`, `r2`) STORING (`v1`) GLOBAL,
  KEY `obright_part8` (`ac1`) LOCAL,
  KEY `obright_part9` (`grp_id`, `row_id`, `row_hex`) LOCAL
) partition by key(grp_id) partitions 2;

insert into obright_part values(1, 1, 'a', 2839, 'aa', 1, 'aa', 2, '1', '1', 'bb', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'v3', now(), now(), now(), 1.1, 1.1, 1.1, 1, 1, 1, now(), now());
update obright_part set v1='mBCSj91aUlHxnmbrN7g5olC0UDUwnLlBUmR64JjDt2nbCdLGeuE3oN6QXxnyREPlxa91Gj8hBM0o8YWnudseTs7k8m92vcqlyiz67opx8iaDhuvIyUmSDYq7IIxEDYb2GDyDtdxoeT40uXSTrjGvMe',v1_check=472593373,v2='l4E4g7RtZVzQRRGasKc0zi3jBaT0bav53UQq3zVCwskHVNN3kZN7e5RrzMqgKKGb',v2_check=3046643075,dec1=(r2*1024*1024/10000),dec2=(r1*1024*1024/10000),gmt_modified=now(6) where trx_grp>=2838 and trx_grp<2938;
--sleep 1
select `grp_id`,`row_id`,`row_hex`,`trx_grp`,`v1`,`v1_check`,`v2`,`v2_check`,`r1`,`r2`,`glike`,`c1`,`c2`,`c3`,`c4`,`c5`,`c6`,`c7`,`c8`,`c9`,`c10`,`v3`,`dec1`,`dec2`,`dec3`,`b1`,`d1`,`ac1` from obright_part;
drop table obright_part;

create table t1(a int primary key, b int) partition by hash(a) partitions 2;
create table t2(a int primary key, b int) partition by hash(a) partitions 2;
insert into t1 values(1, 1);
insert into t2 values(1, 1);
#test update change t2.b, not change t1.b
update t1, t2 set t1.b=1, t2.b=2 where t1.a=t2.a and t1.a=1;
--sleep 1
select * from t1;
select * from t2;
update t1, t2 set t1.a=1, t2.a=2 where t1.a=t2.a and t1.a=1;
--sleep 1
select * from t1;
select * from t2;
delete t1, t2 from t1, t2;
--sleep 1
insert into t1 values(1, 1);
insert into t2 values(1, 1);
#test update change t1.b, not change t2.b
update t1, t2 set t1.b=2, t2.b=1 where t1.a=t2.a and t1.a=1;
--sleep 1
select * from t1;
select * from t2;
update t1, t2 set t1.a=2, t2.a=1 where t1.a=t2.a and t1.a=1;
--sleep 1
select * from t1;
select * from t2;
delete t1, t2 from t1, t2;
--sleep 1
insert into t1 values(1, 1);
insert into t2 values(1, 1);
#test update change t1.b and t2.b
update t1, t2 set t1.b=2, t2.b=2 where t1.a=t2.a and t1.a=1;
--sleep 1
select * from t1;
select * from t2;
update t1, t2 set t1.a=2, t2.a=2 where t1.a=t2.a and t1.a=1;
--sleep 1
select * from t1;
select * from t2;
drop table t1, t2;

let $old_ts=query_get_value(show global variables like '%ob_timestamp_service%',Value,1);
set global ob_timestamp_service='LTS';
sleep 3;
create table t1(a int primary key, b int) partition by hash(a) partitions 1;
insert into t1 values(1, 1) on duplicate key update a=2;
insert into t1 values(1, 1) on duplicate key update a=2;
select * from t1;
select * from t1 where a=2;
update t1 set a=3 where a=2;
select * from t1 where a=2;
select * from t1 where a=3;
drop table t1;
eval set global ob_timestamp_service=$old_ts;
sleep 3;
