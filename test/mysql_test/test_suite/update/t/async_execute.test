--disable_query_log
set @@session.explicit_defaults_for_timestamp=off;
--enable_query_log
# tags: optimizer,dml
# description: foobar
--disable_warnings
drop table if exists t1,t2,t3,t4;
--enable_warnings
connect (obsys,$OBMYSQL_MS0,admin@sys,$OBMYSQL_PWD,test,$OBMYSQL_PORT);
connection obsys;
alter system set_tp tp_no=244, error_code = 1, frequency = 1;
connection default;
CREATE TABLE t1 (a INT PRIMARY KEY, b INT NOT NULL);

--error 1364
INSERT INTO t1 (a) VALUES (1);

--error 1364
INSERT INTO t1 (a) VALUES (1) ON DUPLICATE KEY UPDATE a = b;
drop table t1;

###
##
create table t1(pk1 int, pk2 int, pk3 int default 0, primary key(pk1,pk2), extra int);
insert /*agadgafdgafdghfdhggh*/ into t1(pk1,pk2) values(0,1),(-1,0);
insert into t1(pk1,pk2) values(1,2),(2,3);
insert into t1(pk2,pk1) values(4,3),(5,4);
select * from t1;
select pk2,pk1 from t1;
drop table t1;


create table t1(pk1 int primary key, a int);
insert into t1 values(0,1),(-1,0);
insert into t1(pk1,a) values(1,2),(2,3);
insert into t1(a,pk1) values(4,3),(5,4);
select * from t1;
select a,pk1 from t1;

drop table t1;

create table t1(pk1 int, pk2 int, primary key(pk1,pk2), extra int);
insert into t1(pk1,pk2) values(0,1),(-1,0),(3,1),(4,0),(5,1),(6,0);
insert into t1(pk1,pk2) values(1,2),(2,3),(7,1),(8,0),(9,1),(10,0);
create table t2(pk1 int, pk2 int, primary key(pk1,pk2), extra int);
insert into t2 select * from t1;
select * from (select * from t1) as tmp1 where pk1>0;
select * from t1;
select * from t1 where pk1>0 limit 1,10;
select * from t1 where pk1>0 limit 3,10;
select * from (select * from t1) tt1;
delete from t1 where pk2=3 and pk1=2;
drop table t1;
create table t1(c1 int primary key, c2 datetime default now(), c3 datetime default now());
desc t1;
insert into t1 values(1, now(), now());

#test insert hex data,in 10 decimal
--disable_warnings
drop table if exists t1,t2;
--enable_warnings
CREATE TABLE t1(a BIGINT primary key);
INSERT INTO t1 VALUES (0xFFFFFFFFFFFFF);
INSERT INTO t1 VALUES (0xF);
select * from t1;
SELECT * FROM t1 WHERE a=-1 OR a=-2 OR a=16;
SELECT * FROM t1 WHERE a in (-1,-2,16);
CREATE TABLE t2(a int primary key);
INSERT INTO t2 VALUES (0xF1); 
INSERT INTO t2 VALUES (0x01); 
select * from t2;
select * from t2 where a=1;
select * from t2 where a in (1);

##支持insert values之间的引用关系
--disable_warnings
drop table if exists test, tt;
--enable_warnings
create table test (c1 int ,c2 int, c3 int);
insert into test values(1,c1+1,c1+2);
insert into test values(2,c1+1,c3+2);
insert into test values(4,c1+1,c2+2);
select * from test;
insert into test set c1 = 32, c3 = c1+ c2;
insert into test set c1 = 22, c3 = c1+ 2;
select * from test;

##value之间存在引用关系时，要做类型转换
--disable_warnings
drop table if exists test, tt;
--enable_warnings
create table test (c1 int ,c2 int, c3 varchar(4));
insert into test values(1,2,c1+c2);
insert into test (c3,c1,c2) values('1', c3+1,c2+c3);
select * from test;

##多partition,如何计算partition id
--disable_warnings
drop table if exists test, tt;
--enable_warnings
create table test(c1 int, c2 int, c3 int, c4 char(14) default 'nihao' primary key) partition by key(c4) partitions 4;
insert into test values(1,2,3, 'damdam');
insert into test(c1,c2,c3) values(10,2,3);
select * from test partition(p0);
select * from test partition(p1);
select * from test partition(p2);
select * from test partition(p3);
create table tt(c1 int,c2 int, c3 int);
insert into tt values(4,5,6);
--error 1062
insert into test(c1,c2,c3) select * from tt;
select * from test partition(p3);
drop table test;
create table test (c1 int, c2 int, c3 int, c4 int default 5 primary key) partition by hash(c4) partitions 3;
#--error 1235
insert into test(c1,c2,c3) select * from tt;
insert into test values(1,2,3,6);
--error 1062
insert into test values(3,2,2,c1+2);
insert into test set c1 = 4, c4 = c1 + 3;
insert into test values(5,2,3,17);
insert into test values(10, c1+3, c2+3, c3+5);
insert into test values(6,2,3,212);
select * from test partition(p0);
select * from test partition(p1);
select * from test partition(p2);
drop table test;
######
#insert set on duplicate key
create table test(c1 int primary key, c2 int, c3 int);
insert into test set c1= 1 on duplicate key update c2 = values(c2) + c3;
select * from test;
insert into test set c1= 1 on duplicate key update c2 = values(c2) + c3;
select * from test;
insert into test set c1= 1 on duplicate key update c2 = values(c2) + c1;
select * from test;
insert into test set c2 = 3, c1 = c2 + 1 on duplicate key update c3 = values(c1) + c2;
select * from test;
insert into test set c2 = 3, c1 = c2 + 1 on duplicate key update c3 = values(c1) + c2, c2 = c3 + c1;
select * from test;
## explain plan for distributed insertion with l1 paritition  
drop table test;
create table test(c1 int unsigned, c2 int unsigned) partition by range(c1) (partition p0 values less than (100), partition p1 values less than (200),partition p2 values less than (300));
## distributed insertion with l1 paritition  
insert into test values(1,1000), (120,1000), (2,1000);
select * from test order by c1, c2;
## distributed insertion with l1 paritition and without plan cache 
insert into test values(1,1000), (120,1000), (2,1000);
select * from test order by c1, c2;
## distributed insertion with l1 paritition and transaction roll back
--error 1366
insert into test values(1,1000), (120,1000), ("helloworld",1000);
select * from test order by c1, c2;
## distributed insertion with l1 paritition and so many rows
insert into test values
select * from test order by c1, c2;
## explain plan for distributed insertion with l2 paritition 
drop table test;
create table test(c1 bigint, c2 bigint, c3 datetime, primary key(c1,c2,c3))  partition by hash(c1) subpartition by range columns(c3) subpartition template (subpartition p0 values less than ('2016-01-01'), subpartition p1 values less than ('2116-01-01')) partitions 5;
#explain insert into test values(1,1,"2016-01-01"),(100,100,"2015-01-01"),(1000,1000,"2015-11-01"),(10000,10000,"2018-01-01");
## distributed insertion with l2 paritition
insert into test values(1,1,"2016-01-01"),(100,100,"2015-01-01"),(1000,1000,"2015-11-01"),(10000,10000,"2018-01-01");
select * from test order by c1, c2, c3;
## distributed insertion with l2 paritition and without plan cache 
## Duplicated primary key
--error 1062
insert into test values(1,1,"2016-01-01"),(101,101,"2015-01-01"),(1001,1001,"2015-11-01"),(10001,10001,"2018-01-01");
select * from test order by c1, c2, c3;
## distributed insertion with l2 paritition and transaction roll back
--error 1292
insert into test values(1,1,"2016-01-01"),(100,100,"2015-01-01"),(1000,1000,"xxxxxxxxxx"),(10000,10000,"2018-01-01");
select * from test order by c1, c2, c3;
drop table test;

create table test(a int primary key, b int, c int, d int) partition by hash(a) partitions 2;
create index idx1 on test(b);
create index idx2 on test(c);
create index idx3 on test(c, d);
--source mysql_test/include/check_all_idx_ok.inc
insert into test values(1, 1, 1, 1) on duplicate key update a=10;
select * from test order by a;
insert into test values(1, 1, 1, 1) on duplicate key update a=10;
select * from test order by a;
insert into test values(2, 2, 2, 2) on duplicate key update b=20;
insert into test values(2, 2, 2, 2) on duplicate key update b=20;
select * from test order by a;
insert into test values(3, 4, 5, 5) on duplicate key update b=30, c=40;
insert into test values(3, 4, 5, 5) on duplicate key update b=30, c=40;
select * from test order by a;
insert into test values(10, 20, 30, 30) on duplicate key update c=10, d=20;
insert into test values(10, 20, 30, 30) on duplicate key update c=10, d=20;
select * from test order by a;
drop table test;

create table test(a int, b varchar(2000), primary key(a, b));
insert into test values(1, repeat('a', 2000));
--error 1062
insert into test values(1, repeat('a', 2000));
drop table test;

connection obsys;
begin;
insert into oceanbase.__all_ddl_helper(tenant_id, schema_version, schema_id, ddl_type) values(1, 1, 1, 1), (2, 2, 2, 2), (3, 3, 3, 3), (4, 4, 4, 4);
select tenant_id, schema_version, schema_id, ddl_type from oceanbase.__all_ddl_helper where tenant_id in (1, 2, 3, 4) order by tenant_id;
rollback;
connection default;

--error 0, 942
drop table t1;
create table t1(c1 int, c2 int, c3 int as (c1+c2)) partition by hash(c3) partitions 2;
insert into t1(c1) values(1), (2), (3);
--sorted_result
select * from t1;
insert into t1(c1, c2) values(1, 2), (3, 4), (4, 5);
--sorted_result
select * from t1;
update t1 set c1 = 100 where c1 = 1;
--sorted_result
select * from t1;

drop table t1;
create table t1(c1 int, c2 int, c3 int as (c1+c2)) partition by hash(c1) partitions 2;
insert into t1(c1) values(1), (2), (3);
--sorted_result
select * from t1;
insert into t1(c1, c2) values(1, 2), (3, 4), (4, 5);
--sorted_result
select * from t1;
connection obsys;
alter system set_tp tp_no=244, error_code = 0, frequency = 0;
connection default;
