--disable_query_log
set @@session.explicit_defaults_for_timestamp=off;
--enable_query_log
# description: foobar
####TITLE: range update for multiple partition
--disable_warnings
drop table if exists t1;
--enable_warnings


####CASE: single rowkey, using rowkey, >,>=,<,<=
create table t1 (a int, b int, primary key (a)) partition by hash(a) partitions 5;
create index idx on t1(b) partition by hash(b) partitions 4;
--source mysql_test/include/check_all_idx_ok.inc
insert into t1(a,b) values(1,1),(2,1),(3,1),(4,1);
update t1 set b=2 where a>0;
--sorted_result
select * from t1;
update t1 set b=3 where a<5;
--sorted_result
select * from t1;
update t1 set b=4 where a>1;
update t1 set b=5 where a<4;
--sorted_result
select * from t1;
update t1 set b=6 where a>=1;
--sorted_result
select * from t1;
update t1 set b=7 where a<=5;
--sorted_result
select * from t1;
update t1 set b=8 where a>0 and a<2;
update t1 set b=9 where a>=2 and a<3;
update t1 set b=10 where a>=3 and a<=4;
--sorted_result
select * from t1;
update t1 set b=11 where a=1 or a=2 or a=3 or a=4;
--sorted_result
select * from t1;

####CASE: single rowkey, using non_rowkey, >, >=, <, <=
replace into t1(a,b) values(1,1),(2,2),(3,3),(4,4);
update t1 set b=b+1 where b>0;
--sorted_result
select * from t1;
update t1 set b=b-1 where b<6;
--sorted_result
select * from t1;
--sorted_result
update t1 set b=5 where b>1;
update t1 set b=6 where b<5;
--sorted_result
select * from t1;
update t1 set b=7 where b>=1;
--sorted_result
select * from t1;
update t1 set b=8 where b<=7;
--sorted_result
select * from t1;

replace into t1(a,b) values(1,1),(2,2),(3,3),(4,4);
update t1 set b=10 where b>0 and b<2;
update t1 set b=11 where b>=2 and b<3;
update t1 set b=12 where b>=3 and b<=4;
--sorted_result
select * from t1;

replace into t1(a,b) values(1,1),(2,2),(3,3),(4,4);
update t1 set b=11 where b=1 or b=2 or b=3 or b=4;
--sorted_result
select * from t1;

####CASE: single rowkey: using rowkey + non_rowkey, >, >=, <,<=, or
--disable_warnings
drop table if exists t1;
--enable_warnings
create table t1(a int, b int, c int, primary key(a)) partition by hash(a) partitions 5;
create index idx on t1(b) partition by hash(b) partitions 5;
--source mysql_test/include/check_all_idx_ok.inc
replace into t1(a,b) values(1,1),(2,2),(3,1),(4,2);
update t1 set c=1 where a>0 and b>1;
update t1 set c=2 where a<5 and b<2;
--sorted_result
select * from t1;

update t1 set c=3 where a>=0 and b<=1;
update t1 set c=4 where a<=5 and b>=2;
--sorted_result
select * from t1;

update t1 set c=5 where a=0 or a=1 or a=2 or b=1;
update t1 set c=6 where b=2 or a=1 or a=2;
--sorted_result
select * from t1;

replace into t1(a,b,c) values(1,1,NULL),(2,2,NULL),(3,3,NULL),(4,4,NULL);
update t1 set c=1 where a<=1 or b>=4;
update t1 set c=2 where a>1 or b<4;
--sorted_result
select * from t1;

####CASE: two rowkeys, using rowkey, >, >=, <, <=
--disable_warnings
drop table if exists t1;
--enable_warnings
create table t1(a int, b int, c int, d int, primary key(a,b)) partition by hash(b) partitions 5;
create unique index idx on t1(a) partition by hash(a) partitions 4;
create index idx2 on t1(c) partition by hash(c) partitions 5;
--source mysql_test/include/check_all_idx_ok.inc
insert into t1(a,b,c,d) values(1,1,1,1),(2,2,1,1),(3,3,1,1);
update t1 set c=c+1, d=d+1 where (a,b) > (0,0);
--sorted_result
select * from t1;
update t1 set c=c+1, d=d+1 where (a,b) < (4,4);
--sorted_result
select * from t1;
update t1 set c=c+1, d=d+1 where (a,b) >= (1,1);
--sorted_result
select * from t1;
update t1 set c=c+1, d=d+1 where (a,b) <= (1,1);
--sorted_result
select * from t1;
update t1 set c=c+1, d=d+1 where (a,b) in ((NULL,NULL),(0,0),(1,1),(2,2),(3,3),(4,4));
--sorted_result
select * from t1;
update t1 set c=c+1, d=d+1 where (a,b)=(1,1) or (a,b)=(2,2) or (a,b)=(3,3);
--sorted_result
select * from t1;
update t1 set c=1, d=1 where (a,b) in ((1,1),(2,2),(3,3));
update t1 set c=c+1, d=d+1 where (a,b,c,d) >= (1,1,1,1);
--sorted_result
select * from t1;
update t1 set c=c+1, d=d+1 where (a,b,c,d) <= (3,3,3,3);
--sorted_result
select * from t1;
update t1 set c=c+1, d=d+1 where (a,b,c,d)=(1,1,1,1) or (a,b,c,d)=(2,2,1,1) or (a,b,c,d)=(3,3,3,3);
--sorted_result
select * from t1;

####CASE: two rowkeys, using one of rowkey, =, >, >=, <, <=
--disable_warnings
drop table if exists t1;
--enable_warnings
create table t1(a int, b int, c int, d int, primary key(a,b)) partition by hash(a) partitions 5;
create index idx on t1(d) partition by hash(d) partitions 4;
--source mysql_test/include/check_all_idx_ok.inc
insert into t1(a,b,c,d) values(1,1,1,1),(1,2,1,1),(1,3,1,1);

update t1 set c=c+1, d=d+1 where a = 1;
--sorted_result
select * from t1;
update t1 set c=c+1, d=d+1 where a > 0;
update t1 set c=c+1, d=d+1 where a >=1 ;
--sorted_result
select * from t1;
update t1 set c=c+1, d=d+1 where a < 4;
--sorted_result
select * from t1;
update t1 set c=c+1, d=d+1 where a <= 1;
--sorted_result
select * from t1;
update t1 set c=c+1, d=d+1 where a=1 or a=2 or a=3;
--sorted_result
select * from t1;
update t1 set c=c+1, d=d+1 where (a=1 or a=2 or a=3) and (b=1 or b=2);
--sorted_result
select * from t1;
update t1 set c=c+1, d=d+1 where a>=1 and b>=2;
--sorted_result
select * from t1;

####CASE:two rowkeys, update using rowkey + non_rowkey, >, >=, <, <=, =
--disable_warnings
drop table if exists t1;
--enable_warnings
create table t1(a int, b int, c int, d int, primary key(a,b)) partition by hash(a) partitions 5;
create index idx on t1(c) partition by hash(c) partitions 5;
--source mysql_test/include/check_all_idx_ok.inc
replace into t1(a,b,c,d) values(1,1,1,1),(2,2,2,1),(3,3,3,1);

update t1 set d=d+1 where (a,b)>=(1,1) and c=1;
--sorted_result
select * from t1;
update t1 set d=d+1 where (a,b)>=(1,1) and c=3;
--sorted_result
select * from t1;

update t1 set d=d+1 where (a=1 or a=2 or a=3) and c>=1;
--sorted_result
select * from t1;
update t1 set d=d+1 where (a=1 or a=2 or a=3) and c<1;
--sorted_result
select * from t1;

update t1 set d=d+1 where (a=1 or a=2 or a=3) and (b=2 or b=3);
--sorted_result
select * from t1;
update t1 set d=d+1 where (a=1 or a=2 or a=3) and (b=2 or b=3) and c=3;
--sorted_result
select * from t1;

update t1 set c=c+1, d=d+1 where a>=0 and a<=3 and b>1 and b<3;
--sorted_result
select * from t1;
update t1 set c=c+1, d=d+1 where (c,d)>=(1,1);
--sorted_result
select * from t1;
update t1 set c=c+1, d=d+1 where (b,a) > (1,1);
--sorted_result
select * from t1;

####CASE:multi rowkeys
--disable_warnings
drop table if exists t1, t2, t3;
--enable_warnings
#int
create table t1(a int, b int, c int, d int, primary key(a,b,c)) partition by hash(b) partitions 5;
create unique index idx on t1(c) partition by hash(c) partitions 5;
--source mysql_test/include/check_all_idx_ok.inc
insert into t1(a,b,c) values (1,1,1),(2,2,2),(3,3,3);
update t1 set d=1 where (a,b,c)>(0,0,0) and (a,b,c)<=(3,3,3);
--sorted_result
select * from t1;
#varchar
create table t2(a varchar(1024), b varchar(1024), c varchar(1024), d varchar(1024), primary key(a,b,c)) partition by key(b) partitions 5;
create unique index idx on t2(c) partition by key(c) partitions 5;
--source mysql_test/include/check_all_idx_ok.inc
insert into t2(a,b,c) values ('a','a','a'),('b','b','b'),('c','c','c');
update t2 set d='a' where (a,b,c)>=('a','a','b') and (a,b,c)<('b','b','c');
select * from t2;
#timestamp
create table t3(a int, b varchar(1024), c  timestamp(6) default "2012-01-01 12:00:00", d int, primary key(a,b,c)) partition by hash(a) partitions 5;
create unique index idx on t3(b);
--source mysql_test/include/check_all_idx_ok.inc
insert into t3(a,b,c) values (1,'a','2014-02-17'),(2,'b','2014-02-17'),(3,'c','2014-02-18');
update t3 set d=1 where (a,b,c)>=(1,'a','2014-02-17 00:00:00') and (a,b,c)<=(2,'b','2014-02-18');
select * from t3;

--disable_warnings
drop table if exists t1, t2, t3;
--enable_warnings
